{"ast":null,"code":"import * as language from \"../utils/language\";\nimport { Plugins, Capacitor } from \"@capacitor/core\";\nimport { modalController } from \"@ionic/core\";\nimport * as Ionicons from 'ionicons/icons';\n\nconst utils = require(\"../utils/utils\");\n\nexport async function showLogin() {\n  let appLang = this.state.lang;\n  let appDarkMode = this.state.darkMode;\n  let modalId = \"login-modal-\" + utils.generateRandomClassName();\n  customElements.define(modalId, class ModalContent extends HTMLElement {\n    connectedCallback() {\n      this.innerHTML = `\n                <ion-header class=\"ion-header-no-shadow\" style=\"--background: transparent;\">\n                    <ion-toolbar style=\"--background: transparent;\">\n                        <!--<ion-select slot=\"start\" id=\"settings-lang-select\" value=\"` + appLang + `\" cancel-text=\"` + language.get(appLang, \"cancel\") + `\" ok-text=\"` + language.get(appLang, \"alertOkButton\") + `\" interface=\"alert\">\n                            ` + utils.getLanguageSelection() + `\n                        </ion-select>-->\n                        <ion-button onClick=\"window.customFunctions.openLanguageModal(); return false\">\n                                ` + language.name(appLang) + `\n                            </ion-button>\n                        <ion-buttons slot=\"end\">\n                            <ion-button onClick=\"window.customFunctions.loginToggleDarkMode()\">\n                                <ion-icon slot=\"icon-only\" icon=\"` + (appDarkMode ? Ionicons.sunny : Ionicons.moon) + `\"></ion-icon>\n                            </ion-button>\n                        </ion-buttons>\n                    </ion-toolbar>\n                </ion-header>\n                <ion-content fullscreen>\n                    <div style=\"position: absolute; left: 50%; top: 50%; -webkit-transform: translate(-50%, -50%); transform: translate(-50%, -50%); width: 100%;\">\n                        <center>\n                            <ion-avatar>\n                                <img src=\"assets/img/icon.png\">\n                            </ion-avatar>\n                            <ion-item style=\"width: 90%; margin-top: 30px;\">\n                                <ion-input type=\"text\" id=\"login-email\" placeholder=\"` + language.get(appLang, \"emailPlaceholder\") + `\"></ion-input>\n                            </ion-item>\n                            <ion-item style=\"width: 90%;\">\n                                <ion-input type=\"password\" id=\"login-password\" placeholder=\"` + language.get(appLang, \"passwordPlaceholder\") + `\"></ion-input>\n                            </ion-item>\n                            <ion-item style=\"width: 90%; display: none;\" id=\"login-2fa-container\">\n                                <ion-input type=\"number\" id=\"login-2fa\" placeholder=\"` + language.get(appLang, \"2faPlaceholder\") + `\"></ion-input>\n                            </ion-item>\n                            <ion-button expand=\"block\" style=\"width: 90%; margin-top: 50px;\" onClick=\"window.customFunctions.doLogin()\">` + language.get(appLang, \"loginButton\") + `</ion-button>\n                            <br>\n                            ` + language.get(appLang, \"or\").toUpperCase() + `\n                            <br>\n                            <br>\n                            <a onClick=\"window.customFunctions.openRegisterModal()\">` + language.get(appLang, \"registerLink\") + `</a>\n                        </center>\n                    </div>\n                </ion-content>\n            `;\n    }\n\n  });\n  let modal = await modalController.create({\n    component: modalId,\n    swipeToClose: false,\n    showBackdrop: false,\n    backdropDismiss: false,\n    cssClass: \"modal-fullscreen\"\n  });\n  await modal.present();\n  this.setupStatusbar(\"login/register\");\n  modal.onDidDismiss().then(() => {\n    this.setupStatusbar();\n  });\n\n  if (Capacitor.isNative) {\n    Plugins.SplashScreen.hide();\n  }\n\n  clearInterval(window.customVariables.selectLangInterval);\n  window.customVariables.selectLangInterval = setInterval(async () => {\n    if (typeof document.getElementById(\"settings-lang-select\") == \"undefined\") {\n      return clearInterval(window.customVariables.selectLangInterval);\n    }\n\n    if (document.getElementById(\"settings-lang-select\") == null) {\n      return clearInterval(window.customVariables.selectLangInterval);\n    }\n\n    if (typeof document.getElementById(\"settings-lang-select\").value == \"undefined\") {\n      return clearInterval(window.customVariables.selectLangInterval);\n    }\n\n    let selectedLang = document.getElementById(\"settings-lang-select\").value;\n\n    if (selectedLang !== appLang) {\n      if (language.isAvailable(selectedLang)) {\n        clearInterval(window.customVariables.selectLangInterval);\n        await Plugins.Storage.set({\n          key: \"lang\",\n          value: selectedLang\n        });\n        return document.location.href = \"index.html\";\n      }\n    }\n  }, 100);\n}","map":{"version":3,"sources":["/Users/jan/Documents/filen/app/src/components/login.js"],"names":["language","Plugins","Capacitor","modalController","Ionicons","utils","require","showLogin","appLang","state","lang","appDarkMode","darkMode","modalId","generateRandomClassName","customElements","define","ModalContent","HTMLElement","connectedCallback","innerHTML","get","getLanguageSelection","name","sunny","moon","toUpperCase","modal","create","component","swipeToClose","showBackdrop","backdropDismiss","cssClass","present","setupStatusbar","onDidDismiss","then","isNative","SplashScreen","hide","clearInterval","window","customVariables","selectLangInterval","setInterval","document","getElementById","value","selectedLang","isAvailable","Storage","set","key","location","href"],"mappings":"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","sourcesContent":["import * as language from \"../utils/language\"\r\nimport { Plugins, Capacitor } from \"@capacitor/core\"\r\nimport { modalController } from \"@ionic/core\"\r\nimport * as Ionicons from 'ionicons/icons'\r\n\r\nconst utils = require(\"../utils/utils\")\r\n\r\nexport async function showLogin(){\r\n    let appLang = this.state.lang\r\n    let appDarkMode = this.state.darkMode\r\n    let modalId = \"login-modal-\" + utils.generateRandomClassName()\r\n\r\n    customElements.define(modalId, class ModalContent extends HTMLElement {\r\n        connectedCallback(){\r\n            this.innerHTML = `\r\n                <ion-header class=\"ion-header-no-shadow\" style=\"--background: transparent;\">\r\n                    <ion-toolbar style=\"--background: transparent;\">\r\n                        <!--<ion-select slot=\"start\" id=\"settings-lang-select\" value=\"` + appLang + `\" cancel-text=\"` + language.get(appLang, \"cancel\") + `\" ok-text=\"` + language.get(appLang, \"alertOkButton\") + `\" interface=\"alert\">\r\n                            ` + utils.getLanguageSelection() + `\r\n                        </ion-select>-->\r\n                        <ion-button onClick=\"window.customFunctions.openLanguageModal(); return false\">\r\n                                ` + language.name(appLang) + `\r\n                            </ion-button>\r\n                        <ion-buttons slot=\"end\">\r\n                            <ion-button onClick=\"window.customFunctions.loginToggleDarkMode()\">\r\n                                <ion-icon slot=\"icon-only\" icon=\"` + (appDarkMode ? Ionicons.sunny : Ionicons.moon) + `\"></ion-icon>\r\n                            </ion-button>\r\n                        </ion-buttons>\r\n                    </ion-toolbar>\r\n                </ion-header>\r\n                <ion-content fullscreen>\r\n                    <div style=\"position: absolute; left: 50%; top: 50%; -webkit-transform: translate(-50%, -50%); transform: translate(-50%, -50%); width: 100%;\">\r\n                        <center>\r\n                            <ion-avatar>\r\n                                <img src=\"assets/img/icon.png\">\r\n                            </ion-avatar>\r\n                            <ion-item style=\"width: 90%; margin-top: 30px;\">\r\n                                <ion-input type=\"text\" id=\"login-email\" placeholder=\"` + language.get(appLang, \"emailPlaceholder\") + `\"></ion-input>\r\n                            </ion-item>\r\n                            <ion-item style=\"width: 90%;\">\r\n                                <ion-input type=\"password\" id=\"login-password\" placeholder=\"` + language.get(appLang, \"passwordPlaceholder\") + `\"></ion-input>\r\n                            </ion-item>\r\n                            <ion-item style=\"width: 90%; display: none;\" id=\"login-2fa-container\">\r\n                                <ion-input type=\"number\" id=\"login-2fa\" placeholder=\"` + language.get(appLang, \"2faPlaceholder\") + `\"></ion-input>\r\n                            </ion-item>\r\n                            <ion-button expand=\"block\" style=\"width: 90%; margin-top: 50px;\" onClick=\"window.customFunctions.doLogin()\">` + language.get(appLang, \"loginButton\") + `</ion-button>\r\n                            <br>\r\n                            ` + language.get(appLang, \"or\").toUpperCase() + `\r\n                            <br>\r\n                            <br>\r\n                            <a onClick=\"window.customFunctions.openRegisterModal()\">` + language.get(appLang, \"registerLink\") + `</a>\r\n                        </center>\r\n                    </div>\r\n                </ion-content>\r\n            `;\r\n        }\r\n    })\r\n\r\n    let modal = await modalController.create({\r\n        component: modalId,\r\n        swipeToClose: false,\r\n        showBackdrop: false,\r\n        backdropDismiss: false,\r\n        cssClass: \"modal-fullscreen\"\r\n    })\r\n\r\n    await modal.present()\r\n\r\n    this.setupStatusbar(\"login/register\")\r\n\r\n\tmodal.onDidDismiss().then(() => {\r\n        this.setupStatusbar()\r\n    })\r\n\r\n    if(Capacitor.isNative){\r\n        Plugins.SplashScreen.hide()\r\n    }\r\n\r\n    clearInterval(window.customVariables.selectLangInterval)\r\n\r\n    window.customVariables.selectLangInterval = setInterval(async () => {\r\n        if(typeof document.getElementById(\"settings-lang-select\") == \"undefined\"){\r\n            return clearInterval(window.customVariables.selectLangInterval)\r\n        }\r\n\r\n        if(document.getElementById(\"settings-lang-select\") == null){\r\n            return clearInterval(window.customVariables.selectLangInterval)\r\n        }\r\n\r\n        if(typeof document.getElementById(\"settings-lang-select\").value == \"undefined\"){\r\n            return clearInterval(window.customVariables.selectLangInterval)\r\n        }\r\n\r\n        let selectedLang = document.getElementById(\"settings-lang-select\").value\r\n\r\n        if(selectedLang !== appLang){\r\n            if(language.isAvailable(selectedLang)){\r\n                clearInterval(window.customVariables.selectLangInterval)\r\n\r\n                await Plugins.Storage.set({ key: \"lang\", value: selectedLang })\r\n\r\n                return document.location.href = \"index.html\"\r\n            }\r\n        }\r\n    }, 100)\r\n}"]},"metadata":{},"sourceType":"module"}