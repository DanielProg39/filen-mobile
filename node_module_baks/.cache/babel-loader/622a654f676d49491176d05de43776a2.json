{"ast":null,"code":"import * as language from \"../utils/language\";\nimport * as workers from \"../utils/workers\";\nimport { Capacitor, Plugins } from \"@capacitor/core\";\n\nconst utils = require(\"../utils/utils\");\n\nexport async function fileExists(name, parent, callback) {\n  if (parent == null) {\n    parent = \"default\";\n  }\n\n  try {\n    var res = await utils.apiRequest(\"POST\", \"/v1/file/exists\", {\n      apiKey: this.state.userAPIKey,\n      parent,\n      nameHashed: utils.hashFn(name.toLowerCase())\n    });\n  } catch (e) {\n    return callback(e);\n  }\n\n  if (!res.status) {\n    return callback(res.message);\n  }\n\n  return callback(null, res.data.exists, res.data.uuid);\n}\nexport async function markUploadAsDone(uuid, uploadKey, tries, maxTries, callback) {\n  if (tries >= maxTries) {\n    return callback(new Error(\"mark upload as done max tries reached, returning.\"));\n  }\n\n  try {\n    var res = await utils.apiRequest(\"POST\", \"/v1/upload/done\", {\n      uuid,\n      uploadKey\n    });\n  } catch (e) {\n    console.log(e);\n    return setTimeout(() => {\n      this.markUploadAsDone(uuid, uploadKey, tries + 1, maxTries, callback);\n    }, 1000);\n  }\n\n  if (!res.status) {\n    console.log(res.message);\n    return callback(res.message);\n  }\n\n  return callback(null);\n}\nexport async function uploadChunk(uuid, file, queryParams, data, tries, maxTries, callback) {\n  await window.customVariables.uploadChunkSemaphore.acquire();\n\n  if (typeof window.customVariables.stoppedUploads[uuid] !== \"undefined\") {\n    return callback(\"stopped\");\n  }\n\n  fetch(utils.getUploadServer() + \"/v1/upload?\" + queryParams, {\n    method: \"POST\",\n    cache: \"no-cache\",\n    body: data\n  }).then(response => {\n    response.json().then(obj => {\n      let res = obj;\n      window.customVariables.uploadChunkSemaphore.release();\n\n      if (typeof window.customVariables.stoppedUploads[uuid] !== \"undefined\") {\n        return callback(\"stopped\");\n      }\n\n      if (!res) {\n        return setTimeout(() => {\n          this.uploadChunk(uuid, file, queryParams, data, tries + 1, maxTries, callback);\n        }, 1000);\n      } else {\n        if (typeof res !== \"object\") {\n          return setTimeout(() => {\n            this.uploadChunk(uuid, file, queryParams, data, tries + 1, maxTries, callback);\n          }, 1000);\n        } else {\n          if (!res.status) {\n            return callback(res.message);\n          } else {\n            return callback(null, res, utils.parseQuery(queryParams));\n          }\n        }\n      }\n    }).catch(err => {\n      console.log(err);\n      window.customVariables.uploadChunkSemaphore.release();\n      return setTimeout(() => {\n        this.uploadChunk(uuid, file, queryParams, data, tries + 1, maxTries, callback);\n      }, 1000);\n    });\n  }).catch(err => {\n    console.log(err);\n    window.customVariables.uploadChunkSemaphore.release();\n    return setTimeout(() => {\n      this.uploadChunk(uuid, file, queryParams, data, tries + 1, maxTries, callback);\n    }, 1000);\n  });\n}\nexport async function queueFileUpload(file) {\n  if (Capacitor.isNative) {\n    if (this.state.settings.onlyWifi) {\n      let networkStatus = await Plugins.Network.getStatus();\n\n      if (networkStatus.connectionType !== \"wifi\") {\n        return this.spawnToast(language.get(this.state.lang, \"onlyWifiError\"));\n      }\n    }\n  }\n\n  if (file.size <= 0) {\n    return this.spawnToast(language.get(this.state.lang, \"uploadInvalidFileSize\", true, [\"__NAME__\"], [file.name]));\n  }\n\n  let parent = utils.currentParentFolder();\n\n  if (file.name.indexOf(\".\") !== -1) {\n    let fileNameEx = file.name.split(\".\");\n    let lowerCaseFileEnding = fileNameEx[fileNameEx.length - 1].toLowerCase();\n    fileNameEx.pop();\n    let fileNameWithLowerCaseEnding = fileNameEx.join(\".\") + \".\" + lowerCaseFileEnding;\n    Object.defineProperty(file, \"name\", {\n      writable: true,\n      value: utils.removeIllegalCharsFromString(fileNameWithLowerCaseEnding)\n    });\n  }\n\n  if (utils.nameRegex(file.name) || utils.checkIfNameIsBanned(file.name) || utils.fileNameValidationRegex(file.name)) {\n    return this.spawnToast(language.get(this.state.lang, \"fileUploadInvalidFileName\", true, [\"__NAME__\"], [file.name]));\n  }\n\n  this.fileExists(file.name, parent, async (err, exists, existsUUID) => {\n    if (err) {\n      return this.spawnToast(language.get(this.state.lang, \"apiRequestError\"));\n    }\n\n    if (exists) {\n      return this.spawnToast(language.get(this.state.lang, \"fileUploadFileAlreadyExists\", true, [\"__NAME__\"], [file.name]));\n    }\n\n    let name = file.name;\n    let mime = file.type;\n    let size = file.size;\n    let uuid = utils.uuidv4();\n    let key = utils.generateRandomString(32);\n    let rm = utils.generateRandomString(32);\n    let uploadKey = utils.generateRandomString(32);\n    let expire = \"never\";\n    let chunkSizeToUse = 1024 * 1024 * 1;\n    let dummyOffset = 0;\n    let fileChunks = 0;\n\n    while (dummyOffset < file.size) {\n      fileChunks++;\n      dummyOffset += chunkSizeToUse;\n    }\n\n    let offset = 0 - chunkSizeToUse;\n    let currentIndex = -1;\n    let nameEnc = utils.cryptoJSEncrypt(name, key);\n    let nameH = utils.hashFn(name.toLowerCase());\n    let mimeEnc = utils.cryptoJSEncrypt(mime, key);\n    let sizeEnc = utils.cryptoJSEncrypt(size.toString(), key);\n    let metaData = utils.cryptoJSEncrypt(JSON.stringify({\n      name,\n      size,\n      mime,\n      key\n    }), this.state.userMasterKeys[this.state.userMasterKeys.length - 1]);\n    let firstDone = false;\n    let doFirst = true;\n    let markedAsDone = false;\n    let chunksUploaded = 0;\n    window.customVariables.stoppedUploads[uuid] = undefined;\n    window.customVariables.stoppedUploadsDone[uuid] = undefined;\n\n    const addToState = () => {\n      let currentUploads = this.state.uploads;\n      currentUploads[uuid] = {\n        uuid,\n        size,\n        chunks: fileChunks,\n        loaded: 0,\n        progress: 0,\n        name: name\n      };\n      window.customVariables.uploads[uuid] = {\n        uuid,\n        size,\n        chunks: fileChunks,\n        loaded: 0,\n        progress: 0,\n        name: name\n      };\n      return this.setState({\n        uploads: currentUploads,\n        uploadsCount: this.state.uploadsCount + 1\n      });\n    };\n\n    const removeFromState = () => {\n      let currentUploads = this.state.uploads;\n      delete currentUploads[uuid];\n      delete window.customVariables.uploads[uuid];\n      return this.setState({\n        uploads: currentUploads,\n        uploadsCount: this.state.uploadsCount - 1\n      });\n    };\n\n    const setProgress = progress => {\n      try {\n        let currentUploads = this.state.uploads;\n        currentUploads[uuid].progress = progress;\n        window.customVariables.uploads[uuid].progress = progress;\n        return this.setState({\n          uploads: currentUploads\n        }, () => {\n          this.forceUpdate();\n        });\n      } catch (e) {\n        return console.log(e);\n      }\n    };\n\n    const setLoaded = moreLoaded => {\n      try {\n        let currentUploads = this.state.uploads;\n        currentUploads[uuid].loaded += moreLoaded;\n        window.customVariables.uploads[uuid].loaded += moreLoaded;\n        return this.setState({\n          uploads: currentUploads\n        });\n      } catch (e) {\n        return console.log(e);\n      }\n    };\n\n    addToState();\n    this.spawnToast(language.get(this.state.lang, \"fileUploadStarted\", true, [\"__NAME__\"], [file.name]));\n    await window.customVariables.uploadSemaphore.acquire();\n    let uploadInterval = setInterval(() => {\n      if (offset < file.size) {\n        if (firstDone) {\n          doFirst = true;\n        }\n\n        if (doFirst) {\n          if (!firstDone) {\n            doFirst = false;\n          }\n\n          offset += chunkSizeToUse;\n          currentIndex += 1;\n          let thisIndex = currentIndex;\n          let chunk = file.slice(offset, offset + chunkSizeToUse);\n          let fileReader = new FileReader();\n\n          fileReader.onload = async () => {\n            let arrayBuffer = fileReader.result;\n            workers.encryptData(uuid, thisIndex, key, arrayBuffer, encrypted => {\n              let blob = encrypted;\n              arrayBuffer = null;\n              let queryParams = new URLSearchParams({\n                apiKey: this.state.userAPIKey,\n                uuid: uuid,\n                name: nameEnc,\n                nameHashed: nameH,\n                size: sizeEnc,\n                chunks: fileChunks,\n                mime: mimeEnc,\n                index: thisIndex,\n                rm: rm,\n                expire: expire,\n                uploadKey: uploadKey,\n                metaData: metaData,\n                parent: parent\n              }).toString();\n              this.uploadChunk(uuid, file, queryParams, blob, 0, 1000000, (err, res, parsedQueryParams) => {\n                if (err) {\n                  console.log(err);\n                  window.customVariables.uploadSemaphore.release();\n                  removeFromState();\n\n                  if (err == \"stopped\") {\n                    if (typeof window.customVariables.stoppedUploadsDone[file.uuid] == \"undefined\") {\n                      window.customVariables.stoppedUploadsDone[file.uuid] = true;\n                      return this.spawnToast(language.get(this.state.lang, \"uploadStopped\", true, [\"__NAME__\"], [file.name]));\n                    } else {\n                      return false;\n                    }\n                  } else {\n                    return this.spawnToast(language.get(this.state.lang, \"fileUploadFailed\", true, [\"__NAME__\"], [file.name]));\n                  }\n                }\n\n                chunksUploaded += 1;\n                console.log(\"Chunk \" + parsedQueryParams.index + \" uploaded\");\n\n                if (typeof window.customVariables.uploads[uuid] !== \"undefined\") {\n                  setLoaded(blob.length);\n\n                  try {\n                    let progress = (window.customVariables.uploads[uuid].loaded / window.customVariables.uploads[uuid].size * 100).toFixed(2);\n\n                    if (progress >= 100) {\n                      progress = 100;\n                    }\n\n                    setProgress(progress);\n                  } catch (e) {\n                    console.log(e);\n                  }\n                }\n\n                blob = null;\n                firstDone = true;\n\n                if (chunksUploaded - 1 >= fileChunks) {\n                  clearInterval(uploadInterval);\n\n                  if (!markedAsDone) {\n                    markedAsDone = true;\n                    console.log(parsedQueryParams.index, fileChunks);\n                    this.markUploadAsDone(uuid, uploadKey, 0, 1000000, err => {\n                      if (err) {\n                        console.log(err);\n                        window.customVariables.uploadSemaphore.release();\n                        removeFromState();\n                        return this.spawnToast(language.get(this.state.lang, \"fileUploadFailed\", true, [\"__NAME__\"], [file.name]));\n                      }\n\n                      utils.checkIfItemParentIsBeingShared(parent, \"file\", {\n                        uuid,\n                        name,\n                        size: parseInt(size),\n                        mime,\n                        key\n                      }, () => {\n                        if (utils.currentParentFolder() == parent) {\n                          clearInterval(window.customVariables.reloadContentAfterUploadTimeout);\n                          window.customVariables.reloadContentAfterUploadTimeout = setTimeout(() => {\n                            if (utils.currentParentFolder() == parent) {\n                              this.updateItemList(false);\n                            }\n                          }, 1000);\n                        }\n\n                        this.spawnToast(language.get(this.state.lang, \"fileUploadDone\", true, [\"__NAME__\"], [file.name]));\n                        window.customVariables.uploadSemaphore.release();\n                        return removeFromState();\n                      });\n                    });\n                  }\n                }\n              });\n            });\n          };\n\n          fileReader.onerror = err => {\n            window.customVariables.uploadSemaphore.release();\n            console.log(err);\n            removeFromState();\n            return this.spawnToast(language.get(this.state.lang, \"fileUploadCouldNotReadFile\", true, [\"__NAME__\"], [file.name]));\n          };\n\n          fileReader.readAsArrayBuffer(chunk);\n        }\n      }\n    }, 100);\n  });\n}","map":{"version":3,"sources":["/Users/jan/Documents/filen/app/src/components/upload.js"],"names":["language","workers","Capacitor","Plugins","utils","require","fileExists","name","parent","callback","res","apiRequest","apiKey","state","userAPIKey","nameHashed","hashFn","toLowerCase","e","status","message","data","exists","uuid","markUploadAsDone","uploadKey","tries","maxTries","Error","console","log","setTimeout","uploadChunk","file","queryParams","window","customVariables","uploadChunkSemaphore","acquire","stoppedUploads","fetch","getUploadServer","method","cache","body","then","response","json","obj","release","parseQuery","catch","err","queueFileUpload","isNative","settings","onlyWifi","networkStatus","Network","getStatus","connectionType","spawnToast","get","lang","size","currentParentFolder","indexOf","fileNameEx","split","lowerCaseFileEnding","length","pop","fileNameWithLowerCaseEnding","join","Object","defineProperty","writable","value","removeIllegalCharsFromString","nameRegex","checkIfNameIsBanned","fileNameValidationRegex","existsUUID","mime","type","uuidv4","key","generateRandomString","rm","expire","chunkSizeToUse","dummyOffset","fileChunks","offset","currentIndex","nameEnc","cryptoJSEncrypt","nameH","mimeEnc","sizeEnc","toString","metaData","JSON","stringify","userMasterKeys","firstDone","doFirst","markedAsDone","chunksUploaded","undefined","stoppedUploadsDone","addToState","currentUploads","uploads","chunks","loaded","progress","setState","uploadsCount","removeFromState","setProgress","forceUpdate","setLoaded","moreLoaded","uploadSemaphore","uploadInterval","setInterval","thisIndex","chunk","slice","fileReader","FileReader","onload","arrayBuffer","result","encryptData","encrypted","blob","URLSearchParams","index","parsedQueryParams","toFixed","clearInterval","checkIfItemParentIsBeingShared","parseInt","reloadContentAfterUploadTimeout","updateItemList","onerror","readAsArrayBuffer"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,mBAA1B;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,iBAAnC;;AAEA,MAAMC,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAArB;;AAEA,OAAO,eAAeC,UAAf,CAA0BC,IAA1B,EAAgCC,MAAhC,EAAwCC,QAAxC,EAAiD;AACvD,MAAGD,MAAM,IAAI,IAAb,EAAkB;AACjBA,IAAAA,MAAM,GAAG,SAAT;AACA;;AAED,MAAG;AACF,QAAIE,GAAG,GAAG,MAAMN,KAAK,CAACO,UAAN,CAAiB,MAAjB,EAAyB,iBAAzB,EAA4C;AAC3DC,MAAAA,MAAM,EAAE,KAAKC,KAAL,CAAWC,UADwC;AAE3DN,MAAAA,MAF2D;AAG3DO,MAAAA,UAAU,EAAEX,KAAK,CAACY,MAAN,CAAaT,IAAI,CAACU,WAAL,EAAb;AAH+C,KAA5C,CAAhB;AAKA,GAND,CAOA,OAAMC,CAAN,EAAQ;AACP,WAAOT,QAAQ,CAACS,CAAD,CAAf;AACA;;AAED,MAAG,CAACR,GAAG,CAACS,MAAR,EAAe;AACd,WAAOV,QAAQ,CAACC,GAAG,CAACU,OAAL,CAAf;AACA;;AAED,SAAOX,QAAQ,CAAC,IAAD,EAAOC,GAAG,CAACW,IAAJ,CAASC,MAAhB,EAAwBZ,GAAG,CAACW,IAAJ,CAASE,IAAjC,CAAf;AACA;AAED,OAAO,eAAeC,gBAAf,CAAgCD,IAAhC,EAAsCE,SAAtC,EAAiDC,KAAjD,EAAwDC,QAAxD,EAAkElB,QAAlE,EAA2E;AACjF,MAAGiB,KAAK,IAAIC,QAAZ,EAAqB;AACpB,WAAOlB,QAAQ,CAAC,IAAImB,KAAJ,CAAU,mDAAV,CAAD,CAAf;AACA;;AAED,MAAG;AACI,QAAIlB,GAAG,GAAG,MAAMN,KAAK,CAACO,UAAN,CAAiB,MAAjB,EAAyB,iBAAzB,EAA4C;AACjEY,MAAAA,IADiE;AAEjEE,MAAAA;AAFiE,KAA5C,CAAhB;AAIH,GALJ,CAMG,OAAMP,CAAN,EAAQ;AACVW,IAAAA,OAAO,CAACC,GAAR,CAAYZ,CAAZ;AAEA,WAAOa,UAAU,CAAC,MAAM;AACvB,WAAKP,gBAAL,CAAsBD,IAAtB,EAA4BE,SAA5B,EAAwCC,KAAK,GAAG,CAAhD,EAAoDC,QAApD,EAA8DlB,QAA9D;AACA,KAFgB,EAEd,IAFc,CAAjB;AAGG;;AAED,MAAG,CAACC,GAAG,CAACS,MAAR,EAAe;AACXU,IAAAA,OAAO,CAACC,GAAR,CAAYpB,GAAG,CAACU,OAAhB;AAEA,WAAOX,QAAQ,CAACC,GAAG,CAACU,OAAL,CAAf;AACH;;AAEJ,SAAOX,QAAQ,CAAC,IAAD,CAAf;AACA;AAED,OAAO,eAAeuB,WAAf,CAA2BT,IAA3B,EAAiCU,IAAjC,EAAuCC,WAAvC,EAAoDb,IAApD,EAA0DK,KAA1D,EAAiEC,QAAjE,EAA2ElB,QAA3E,EAAoF;AAC1F,QAAM0B,MAAM,CAACC,eAAP,CAAuBC,oBAAvB,CAA4CC,OAA5C,EAAN;;AAEA,MAAG,OAAOH,MAAM,CAACC,eAAP,CAAuBG,cAAvB,CAAsChB,IAAtC,CAAP,KAAuD,WAA1D,EAAsE;AAC/D,WAAOd,QAAQ,CAAC,SAAD,CAAf;AACH;;AAEJ+B,EAAAA,KAAK,CAACpC,KAAK,CAACqC,eAAN,KAA0B,aAA1B,GAA0CP,WAA3C,EAAwD;AAC5DQ,IAAAA,MAAM,EAAE,MADoD;AAE5DC,IAAAA,KAAK,EAAE,UAFqD;AAG5DC,IAAAA,IAAI,EAAEvB;AAHsD,GAAxD,CAAL,CAIGwB,IAJH,CAISC,QAAD,IAAc;AACrBA,IAAAA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAsBG,GAAD,IAAS;AAC7B,UAAItC,GAAG,GAAGsC,GAAV;AAEAb,MAAAA,MAAM,CAACC,eAAP,CAAuBC,oBAAvB,CAA4CY,OAA5C;;AAEA,UAAG,OAAOd,MAAM,CAACC,eAAP,CAAuBG,cAAvB,CAAsChB,IAAtC,CAAP,KAAuD,WAA1D,EAAsE;AACrE,eAAOd,QAAQ,CAAC,SAAD,CAAf;AACA;;AAED,UAAG,CAACC,GAAJ,EAAQ;AACP,eAAOqB,UAAU,CAAC,MAAM;AACvB,eAAKC,WAAL,CAAiBT,IAAjB,EAAuBU,IAAvB,EAA6BC,WAA7B,EAA0Cb,IAA1C,EAAiDK,KAAK,GAAG,CAAzD,EAA6DC,QAA7D,EAAuElB,QAAvE;AACA,SAFgB,EAEd,IAFc,CAAjB;AAGA,OAJD,MAKI;AACH,YAAG,OAAOC,GAAP,KAAe,QAAlB,EAA2B;AAC1B,iBAAOqB,UAAU,CAAC,MAAM;AACvB,iBAAKC,WAAL,CAAiBT,IAAjB,EAAuBU,IAAvB,EAA6BC,WAA7B,EAA0Cb,IAA1C,EAAiDK,KAAK,GAAG,CAAzD,EAA6DC,QAA7D,EAAuElB,QAAvE;AACA,WAFgB,EAEd,IAFc,CAAjB;AAGA,SAJD,MAKI;AACH,cAAG,CAACC,GAAG,CAACS,MAAR,EAAe;AACd,mBAAOV,QAAQ,CAACC,GAAG,CAACU,OAAL,CAAf;AACA,WAFD,MAGI;AACH,mBAAOX,QAAQ,CAAC,IAAD,EAAOC,GAAP,EAAYN,KAAK,CAAC8C,UAAN,CAAiBhB,WAAjB,CAAZ,CAAf;AACA;AACD;AACD;AACD,KA7BD,EA6BGiB,KA7BH,CA6BUC,GAAD,IAAS;AACjBvB,MAAAA,OAAO,CAACC,GAAR,CAAYsB,GAAZ;AAEAjB,MAAAA,MAAM,CAACC,eAAP,CAAuBC,oBAAvB,CAA4CY,OAA5C;AAEA,aAAOlB,UAAU,CAAC,MAAM;AACvB,aAAKC,WAAL,CAAiBT,IAAjB,EAAuBU,IAAvB,EAA6BC,WAA7B,EAA0Cb,IAA1C,EAAiDK,KAAK,GAAG,CAAzD,EAA6DC,QAA7D,EAAuElB,QAAvE;AACA,OAFgB,EAEd,IAFc,CAAjB;AAGA,KArCD;AAsCA,GA3CD,EA2CG0C,KA3CH,CA2CUC,GAAD,IAAS;AACjBvB,IAAAA,OAAO,CAACC,GAAR,CAAYsB,GAAZ;AAEAjB,IAAAA,MAAM,CAACC,eAAP,CAAuBC,oBAAvB,CAA4CY,OAA5C;AAEA,WAAOlB,UAAU,CAAC,MAAM;AACvB,WAAKC,WAAL,CAAiBT,IAAjB,EAAuBU,IAAvB,EAA6BC,WAA7B,EAA0Cb,IAA1C,EAAiDK,KAAK,GAAG,CAAzD,EAA6DC,QAA7D,EAAuElB,QAAvE;AACA,KAFgB,EAEd,IAFc,CAAjB;AAGA,GAnDD;AAoDA;AAED,OAAO,eAAe4C,eAAf,CAA+BpB,IAA/B,EAAoC;AAC1C,MAAG/B,SAAS,CAACoD,QAAb,EAAsB;AACf,QAAG,KAAKzC,KAAL,CAAW0C,QAAX,CAAoBC,QAAvB,EAAgC;AAC5B,UAAIC,aAAa,GAAG,MAAMtD,OAAO,CAACuD,OAAR,CAAgBC,SAAhB,EAA1B;;AAEA,UAAGF,aAAa,CAACG,cAAd,KAAiC,MAApC,EAA2C;AACvC,eAAO,KAAKC,UAAL,CAAgB7D,QAAQ,CAAC8D,GAAT,CAAa,KAAKjD,KAAL,CAAWkD,IAAxB,EAA8B,eAA9B,CAAhB,CAAP;AACH;AACJ;AACJ;;AAED,MAAG9B,IAAI,CAAC+B,IAAL,IAAa,CAAhB,EAAkB;AACd,WAAO,KAAKH,UAAL,CAAgB7D,QAAQ,CAAC8D,GAAT,CAAa,KAAKjD,KAAL,CAAWkD,IAAxB,EAA8B,uBAA9B,EAAuD,IAAvD,EAA6D,CAAC,UAAD,CAA7D,EAA2E,CAAC9B,IAAI,CAAC1B,IAAN,CAA3E,CAAhB,CAAP;AACN;;AAED,MAAIC,MAAM,GAAGJ,KAAK,CAAC6D,mBAAN,EAAb;;AAEA,MAAGhC,IAAI,CAAC1B,IAAL,CAAU2D,OAAV,CAAkB,GAAlB,MAA2B,CAAC,CAA/B,EAAiC;AAChC,QAAIC,UAAU,GAAGlC,IAAI,CAAC1B,IAAL,CAAU6D,KAAV,CAAgB,GAAhB,CAAjB;AACA,QAAIC,mBAAmB,GAAGF,UAAU,CAACA,UAAU,CAACG,MAAX,GAAoB,CAArB,CAAV,CAAkCrD,WAAlC,EAA1B;AAEAkD,IAAAA,UAAU,CAACI,GAAX;AAEA,QAAIC,2BAA2B,GAAGL,UAAU,CAACM,IAAX,CAAgB,GAAhB,IAAuB,GAAvB,GAA6BJ,mBAA/D;AAEAK,IAAAA,MAAM,CAACC,cAAP,CAAsB1C,IAAtB,EAA4B,MAA5B,EAAoC;AAAE2C,MAAAA,QAAQ,EAAE,IAAZ;AAAkBC,MAAAA,KAAK,EAAEzE,KAAK,CAAC0E,4BAAN,CAAmCN,2BAAnC;AAAzB,KAApC;AACA;;AAED,MAAGpE,KAAK,CAAC2E,SAAN,CAAgB9C,IAAI,CAAC1B,IAArB,KAA8BH,KAAK,CAAC4E,mBAAN,CAA0B/C,IAAI,CAAC1B,IAA/B,CAA9B,IAAsEH,KAAK,CAAC6E,uBAAN,CAA8BhD,IAAI,CAAC1B,IAAnC,CAAzE,EAAkH;AACjH,WAAO,KAAKsD,UAAL,CAAgB7D,QAAQ,CAAC8D,GAAT,CAAa,KAAKjD,KAAL,CAAWkD,IAAxB,EAA8B,2BAA9B,EAA2D,IAA3D,EAAiE,CAAC,UAAD,CAAjE,EAA+E,CAAC9B,IAAI,CAAC1B,IAAN,CAA/E,CAAhB,CAAP;AACA;;AAED,OAAKD,UAAL,CAAgB2B,IAAI,CAAC1B,IAArB,EAA2BC,MAA3B,EAAmC,OAAO4C,GAAP,EAAY9B,MAAZ,EAAoB4D,UAApB,KAAmC;AACrE,QAAG9B,GAAH,EAAO;AACN,aAAO,KAAKS,UAAL,CAAgB7D,QAAQ,CAAC8D,GAAT,CAAa,KAAKjD,KAAL,CAAWkD,IAAxB,EAA8B,iBAA9B,CAAhB,CAAP;AACA;;AAED,QAAGzC,MAAH,EAAU;AACT,aAAO,KAAKuC,UAAL,CAAgB7D,QAAQ,CAAC8D,GAAT,CAAa,KAAKjD,KAAL,CAAWkD,IAAxB,EAA8B,6BAA9B,EAA6D,IAA7D,EAAmE,CAAC,UAAD,CAAnE,EAAiF,CAAC9B,IAAI,CAAC1B,IAAN,CAAjF,CAAhB,CAAP;AACA;;AAED,QAAIA,IAAI,GAAG0B,IAAI,CAAC1B,IAAhB;AACA,QAAI4E,IAAI,GAAGlD,IAAI,CAACmD,IAAhB;AACA,QAAIpB,IAAI,GAAG/B,IAAI,CAAC+B,IAAhB;AACA,QAAIzC,IAAI,GAAGnB,KAAK,CAACiF,MAAN,EAAX;AACA,QAAIC,GAAG,GAAGlF,KAAK,CAACmF,oBAAN,CAA2B,EAA3B,CAAV;AACA,QAAIC,EAAE,GAAGpF,KAAK,CAACmF,oBAAN,CAA2B,EAA3B,CAAT;AACA,QAAI9D,SAAS,GAAGrB,KAAK,CAACmF,oBAAN,CAA2B,EAA3B,CAAhB;AACA,QAAIE,MAAM,GAAG,OAAb;AACA,QAAIC,cAAc,GAAK,OAAO,IAAR,GAAgB,CAAtC;AACA,QAAIC,WAAW,GAAG,CAAlB;AACA,QAAIC,UAAU,GAAG,CAAjB;;AAEA,WAAMD,WAAW,GAAG1D,IAAI,CAAC+B,IAAzB,EAA8B;AAC7B4B,MAAAA,UAAU;AACVD,MAAAA,WAAW,IAAID,cAAf;AACA;;AAED,QAAIG,MAAM,GAAI,IAAIH,cAAlB;AACA,QAAII,YAAY,GAAG,CAAC,CAApB;AAEA,QAAIC,OAAO,GAAG3F,KAAK,CAAC4F,eAAN,CAAsBzF,IAAtB,EAA4B+E,GAA5B,CAAd;AACA,QAAIW,KAAK,GAAG7F,KAAK,CAACY,MAAN,CAAaT,IAAI,CAACU,WAAL,EAAb,CAAZ;AACA,QAAIiF,OAAO,GAAG9F,KAAK,CAAC4F,eAAN,CAAsBb,IAAtB,EAA4BG,GAA5B,CAAd;AACA,QAAIa,OAAO,GAAG/F,KAAK,CAAC4F,eAAN,CAAsBhC,IAAI,CAACoC,QAAL,EAAtB,EAAuCd,GAAvC,CAAd;AAEA,QAAIe,QAAQ,GAAGjG,KAAK,CAAC4F,eAAN,CAAsBM,IAAI,CAACC,SAAL,CAAe;AACnDhG,MAAAA,IADmD;AAEnDyD,MAAAA,IAFmD;AAGnDmB,MAAAA,IAHmD;AAInDG,MAAAA;AAJmD,KAAf,CAAtB,EAKX,KAAKzE,KAAL,CAAW2F,cAAX,CAA0B,KAAK3F,KAAL,CAAW2F,cAAX,CAA0BlC,MAA1B,GAAmC,CAA7D,CALW,CAAf;AAOA,QAAImC,SAAS,GAAG,KAAhB;AACA,QAAIC,OAAO,GAAG,IAAd;AACA,QAAIC,YAAY,GAAG,KAAnB;AACA,QAAIC,cAAc,GAAG,CAArB;AAEAzE,IAAAA,MAAM,CAACC,eAAP,CAAuBG,cAAvB,CAAsChB,IAAtC,IAA8CsF,SAA9C;AACG1E,IAAAA,MAAM,CAACC,eAAP,CAAuB0E,kBAAvB,CAA0CvF,IAA1C,IAAkDsF,SAAlD;;AAEH,UAAME,UAAU,GAAG,MAAM;AACxB,UAAIC,cAAc,GAAG,KAAKnG,KAAL,CAAWoG,OAAhC;AAEAD,MAAAA,cAAc,CAACzF,IAAD,CAAd,GAAuB;AACtBA,QAAAA,IADsB;AAEtByC,QAAAA,IAFsB;AAGtBkD,QAAAA,MAAM,EAAEtB,UAHc;AAItBuB,QAAAA,MAAM,EAAE,CAJc;AAKtBC,QAAAA,QAAQ,EAAE,CALY;AAMtB7G,QAAAA,IAAI,EAAEA;AANgB,OAAvB;AASA4B,MAAAA,MAAM,CAACC,eAAP,CAAuB6E,OAAvB,CAA+B1F,IAA/B,IAAuC;AACtCA,QAAAA,IADsC;AAEtCyC,QAAAA,IAFsC;AAGtCkD,QAAAA,MAAM,EAAEtB,UAH8B;AAItCuB,QAAAA,MAAM,EAAE,CAJ8B;AAKtCC,QAAAA,QAAQ,EAAE,CAL4B;AAMtC7G,QAAAA,IAAI,EAAEA;AANgC,OAAvC;AASA,aAAO,KAAK8G,QAAL,CAAc;AACpBJ,QAAAA,OAAO,EAAED,cADW;AAEpBM,QAAAA,YAAY,EAAG,KAAKzG,KAAL,CAAWyG,YAAX,GAA0B;AAFrB,OAAd,CAAP;AAIA,KAzBD;;AA2BA,UAAMC,eAAe,GAAG,MAAM;AAC7B,UAAIP,cAAc,GAAG,KAAKnG,KAAL,CAAWoG,OAAhC;AAEA,aAAOD,cAAc,CAACzF,IAAD,CAArB;AACA,aAAOY,MAAM,CAACC,eAAP,CAAuB6E,OAAvB,CAA+B1F,IAA/B,CAAP;AAEA,aAAO,KAAK8F,QAAL,CAAc;AACpBJ,QAAAA,OAAO,EAAED,cADW;AAEpBM,QAAAA,YAAY,EAAG,KAAKzG,KAAL,CAAWyG,YAAX,GAA0B;AAFrB,OAAd,CAAP;AAIA,KAVD;;AAYA,UAAME,WAAW,GAAIJ,QAAD,IAAc;AACjC,UAAG;AACF,YAAIJ,cAAc,GAAG,KAAKnG,KAAL,CAAWoG,OAAhC;AAEAD,QAAAA,cAAc,CAACzF,IAAD,CAAd,CAAqB6F,QAArB,GAAgCA,QAAhC;AACAjF,QAAAA,MAAM,CAACC,eAAP,CAAuB6E,OAAvB,CAA+B1F,IAA/B,EAAqC6F,QAArC,GAAgDA,QAAhD;AAEA,eAAO,KAAKC,QAAL,CAAc;AACpBJ,UAAAA,OAAO,EAAED;AADW,SAAd,EAEJ,MAAM;AACR,eAAKS,WAAL;AACA,SAJM,CAAP;AAKA,OAXD,CAYA,OAAMvG,CAAN,EAAQ;AACP,eAAOW,OAAO,CAACC,GAAR,CAAYZ,CAAZ,CAAP;AACA;AACD,KAhBD;;AAkBA,UAAMwG,SAAS,GAAIC,UAAD,IAAgB;AACjC,UAAG;AACF,YAAIX,cAAc,GAAG,KAAKnG,KAAL,CAAWoG,OAAhC;AAEAD,QAAAA,cAAc,CAACzF,IAAD,CAAd,CAAqB4F,MAArB,IAA+BQ,UAA/B;AACAxF,QAAAA,MAAM,CAACC,eAAP,CAAuB6E,OAAvB,CAA+B1F,IAA/B,EAAqC4F,MAArC,IAA+CQ,UAA/C;AAEA,eAAO,KAAKN,QAAL,CAAc;AACpBJ,UAAAA,OAAO,EAAED;AADW,SAAd,CAAP;AAGA,OATD,CAUA,OAAM9F,CAAN,EAAQ;AACP,eAAOW,OAAO,CAACC,GAAR,CAAYZ,CAAZ,CAAP;AACA;AACD,KAdD;;AAgBA6F,IAAAA,UAAU;AAEV,SAAKlD,UAAL,CAAgB7D,QAAQ,CAAC8D,GAAT,CAAa,KAAKjD,KAAL,CAAWkD,IAAxB,EAA8B,mBAA9B,EAAmD,IAAnD,EAAyD,CAAC,UAAD,CAAzD,EAAuE,CAAC9B,IAAI,CAAC1B,IAAN,CAAvE,CAAhB;AAEA,UAAM4B,MAAM,CAACC,eAAP,CAAuBwF,eAAvB,CAAuCtF,OAAvC,EAAN;AAEA,QAAIuF,cAAc,GAAGC,WAAW,CAAC,MAAM;AACtC,UAAGjC,MAAM,GAAG5D,IAAI,CAAC+B,IAAjB,EAAsB;AACrB,YAAGyC,SAAH,EAAa;AACZC,UAAAA,OAAO,GAAG,IAAV;AACA;;AAED,YAAGA,OAAH,EAAW;AACV,cAAG,CAACD,SAAJ,EAAc;AACbC,YAAAA,OAAO,GAAG,KAAV;AACA;;AAEDb,UAAAA,MAAM,IAAIH,cAAV;AACAI,UAAAA,YAAY,IAAI,CAAhB;AAEA,cAAIiC,SAAS,GAAGjC,YAAhB;AACA,cAAIkC,KAAK,GAAG/F,IAAI,CAACgG,KAAL,CAAWpC,MAAX,EAAoBA,MAAM,GAAGH,cAA7B,CAAZ;AAEA,cAAIwC,UAAU,GAAG,IAAIC,UAAJ,EAAjB;;AAEAD,UAAAA,UAAU,CAACE,MAAX,GAAoB,YAAY;AAC/B,gBAAIC,WAAW,GAAGH,UAAU,CAACI,MAA7B;AAEArI,YAAAA,OAAO,CAACsI,WAAR,CAAoBhH,IAApB,EAA0BwG,SAA1B,EAAqCzC,GAArC,EAA0C+C,WAA1C,EAAwDG,SAAD,IAAe;AACrE,kBAAIC,IAAI,GAAGD,SAAX;AAEAH,cAAAA,WAAW,GAAG,IAAd;AAEA,kBAAInG,WAAW,GAAG,IAAIwG,eAAJ,CAAoB;AACrC9H,gBAAAA,MAAM,EAAE,KAAKC,KAAL,CAAWC,UADkB;AAErCS,gBAAAA,IAAI,EAAEA,IAF+B;AAGrChB,gBAAAA,IAAI,EAAEwF,OAH+B;AAIrChF,gBAAAA,UAAU,EAAEkF,KAJyB;AAKrCjC,gBAAAA,IAAI,EAAEmC,OAL+B;AAMrCe,gBAAAA,MAAM,EAAEtB,UAN6B;AAOrCT,gBAAAA,IAAI,EAAEe,OAP+B;AAQrCyC,gBAAAA,KAAK,EAAEZ,SAR8B;AASrCvC,gBAAAA,EAAE,EAAEA,EATiC;AAUrCC,gBAAAA,MAAM,EAAEA,MAV6B;AAWrChE,gBAAAA,SAAS,EAAEA,SAX0B;AAYrC4E,gBAAAA,QAAQ,EAAEA,QAZ2B;AAarC7F,gBAAAA,MAAM,EAAEA;AAb6B,eAApB,EAcf4F,QAde,EAAlB;AAgBA,mBAAKpE,WAAL,CAAiBT,IAAjB,EAAuBU,IAAvB,EAA6BC,WAA7B,EAA0CuG,IAA1C,EAAgD,CAAhD,EAAmD,OAAnD,EAA4D,CAACrF,GAAD,EAAM1C,GAAN,EAAWkI,iBAAX,KAAiC;AAC5F,oBAAGxF,GAAH,EAAO;AACNvB,kBAAAA,OAAO,CAACC,GAAR,CAAYsB,GAAZ;AAEAjB,kBAAAA,MAAM,CAACC,eAAP,CAAuBwF,eAAvB,CAAuC3E,OAAvC;AAEAsE,kBAAAA,eAAe;;AAEf,sBAAGnE,GAAG,IAAI,SAAV,EAAoB;AACnB,wBAAG,OAAOjB,MAAM,CAACC,eAAP,CAAuB0E,kBAAvB,CAA0C7E,IAAI,CAACV,IAA/C,CAAP,IAA+D,WAAlE,EAA8E;AAC7EY,sBAAAA,MAAM,CAACC,eAAP,CAAuB0E,kBAAvB,CAA0C7E,IAAI,CAACV,IAA/C,IAAuD,IAAvD;AAEA,6BAAO,KAAKsC,UAAL,CAAgB7D,QAAQ,CAAC8D,GAAT,CAAa,KAAKjD,KAAL,CAAWkD,IAAxB,EAA8B,eAA9B,EAA+C,IAA/C,EAAqD,CAAC,UAAD,CAArD,EAAmE,CAAC9B,IAAI,CAAC1B,IAAN,CAAnE,CAAhB,CAAP;AACA,qBAJD,MAKI;AACH,6BAAO,KAAP;AACA;AACD,mBATD,MAUI;AACH,2BAAO,KAAKsD,UAAL,CAAgB7D,QAAQ,CAAC8D,GAAT,CAAa,KAAKjD,KAAL,CAAWkD,IAAxB,EAA8B,kBAA9B,EAAkD,IAAlD,EAAwD,CAAC,UAAD,CAAxD,EAAsE,CAAC9B,IAAI,CAAC1B,IAAN,CAAtE,CAAhB,CAAP;AACA;AACD;;AAEDqG,gBAAAA,cAAc,IAAI,CAAlB;AAEA/E,gBAAAA,OAAO,CAACC,GAAR,CAAY,WAAW8G,iBAAiB,CAACD,KAA7B,GAAqC,WAAjD;;AAEA,oBAAG,OAAOxG,MAAM,CAACC,eAAP,CAAuB6E,OAAvB,CAA+B1F,IAA/B,CAAP,KAAgD,WAAnD,EAA+D;AAC9DmG,kBAAAA,SAAS,CAACe,IAAI,CAACnE,MAAN,CAAT;;AAEA,sBAAG;AACF,wBAAI8C,QAAQ,GAAG,CAAEjF,MAAM,CAACC,eAAP,CAAuB6E,OAAvB,CAA+B1F,IAA/B,EAAqC4F,MAArC,GAA8ChF,MAAM,CAACC,eAAP,CAAuB6E,OAAvB,CAA+B1F,IAA/B,EAAqCyC,IAApF,GAA4F,GAA7F,EAAkG6E,OAAlG,CAA0G,CAA1G,CAAf;;AAEA,wBAAGzB,QAAQ,IAAI,GAAf,EAAmB;AAClBA,sBAAAA,QAAQ,GAAG,GAAX;AACA;;AAEDI,oBAAAA,WAAW,CAACJ,QAAD,CAAX;AACA,mBARD,CASA,OAAMlG,CAAN,EAAQ;AACPW,oBAAAA,OAAO,CAACC,GAAR,CAAYZ,CAAZ;AACA;AACD;;AAEDuH,gBAAAA,IAAI,GAAG,IAAP;AACAhC,gBAAAA,SAAS,GAAG,IAAZ;;AAEA,oBAAIG,cAAc,GAAG,CAAlB,IAAwBhB,UAA3B,EAAsC;AACrCkD,kBAAAA,aAAa,CAACjB,cAAD,CAAb;;AAEA,sBAAG,CAAClB,YAAJ,EAAiB;AAChBA,oBAAAA,YAAY,GAAG,IAAf;AAEA9E,oBAAAA,OAAO,CAACC,GAAR,CAAY8G,iBAAiB,CAACD,KAA9B,EAAqC/C,UAArC;AAEA,yBAAKpE,gBAAL,CAAsBD,IAAtB,EAA4BE,SAA5B,EAAuC,CAAvC,EAA0C,OAA1C,EAAoD2B,GAAD,IAAS;AAC3D,0BAAGA,GAAH,EAAO;AACNvB,wBAAAA,OAAO,CAACC,GAAR,CAAYsB,GAAZ;AAEAjB,wBAAAA,MAAM,CAACC,eAAP,CAAuBwF,eAAvB,CAAuC3E,OAAvC;AAEAsE,wBAAAA,eAAe;AAEf,+BAAO,KAAK1D,UAAL,CAAgB7D,QAAQ,CAAC8D,GAAT,CAAa,KAAKjD,KAAL,CAAWkD,IAAxB,EAA8B,kBAA9B,EAAkD,IAAlD,EAAwD,CAAC,UAAD,CAAxD,EAAsE,CAAC9B,IAAI,CAAC1B,IAAN,CAAtE,CAAhB,CAAP;AACA;;AAEDH,sBAAAA,KAAK,CAAC2I,8BAAN,CAAqCvI,MAArC,EAA6C,MAA7C,EAAqD;AACpDe,wBAAAA,IADoD;AAEpDhB,wBAAAA,IAFoD;AAGpDyD,wBAAAA,IAAI,EAAEgF,QAAQ,CAAChF,IAAD,CAHsC;AAIpDmB,wBAAAA,IAJoD;AAKpDG,wBAAAA;AALoD,uBAArD,EAMG,MAAM;AACR,4BAAGlF,KAAK,CAAC6D,mBAAN,MAA+BzD,MAAlC,EAAyC;AACxCsI,0BAAAA,aAAa,CAAC3G,MAAM,CAACC,eAAP,CAAuB6G,+BAAxB,CAAb;AAEA9G,0BAAAA,MAAM,CAACC,eAAP,CAAuB6G,+BAAvB,GAAyDlH,UAAU,CAAC,MAAM;AACzE,gCAAG3B,KAAK,CAAC6D,mBAAN,MAA+BzD,MAAlC,EAAyC;AACxC,mCAAK0I,cAAL,CAAoB,KAApB;AACA;AACD,2BAJkE,EAIhE,IAJgE,CAAnE;AAKA;;AAED,6BAAKrF,UAAL,CAAgB7D,QAAQ,CAAC8D,GAAT,CAAa,KAAKjD,KAAL,CAAWkD,IAAxB,EAA8B,gBAA9B,EAAgD,IAAhD,EAAsD,CAAC,UAAD,CAAtD,EAAoE,CAAC9B,IAAI,CAAC1B,IAAN,CAApE,CAAhB;AAEA4B,wBAAAA,MAAM,CAACC,eAAP,CAAuBwF,eAAvB,CAAuC3E,OAAvC;AAEA,+BAAOsE,eAAe,EAAtB;AACA,uBAtBD;AAuBA,qBAlCD;AAmCA;AACD;AACD,eA5FD;AA6FA,aAlHD;AAmHA,WAtHD;;AAwHAW,UAAAA,UAAU,CAACiB,OAAX,GAAsB/F,GAAD,IAAS;AAC7BjB,YAAAA,MAAM,CAACC,eAAP,CAAuBwF,eAAvB,CAAuC3E,OAAvC;AAEApB,YAAAA,OAAO,CAACC,GAAR,CAAYsB,GAAZ;AAEAmE,YAAAA,eAAe;AAEf,mBAAO,KAAK1D,UAAL,CAAgB7D,QAAQ,CAAC8D,GAAT,CAAa,KAAKjD,KAAL,CAAWkD,IAAxB,EAA8B,4BAA9B,EAA4D,IAA5D,EAAkE,CAAC,UAAD,CAAlE,EAAgF,CAAC9B,IAAI,CAAC1B,IAAN,CAAhF,CAAhB,CAAP;AACA,WARD;;AAUA2H,UAAAA,UAAU,CAACkB,iBAAX,CAA6BpB,KAA7B;AACA;AACD;AACD,KAxJ+B,EAwJ7B,GAxJ6B,CAAhC;AAyJA,GAzRD;AA0RA","sourcesContent":["import * as language from \"../utils/language\"\r\nimport * as workers from \"../utils/workers\"\r\nimport { Capacitor, Plugins } from \"@capacitor/core\"\r\n\r\nconst utils = require(\"../utils/utils\")\r\n\r\nexport async function fileExists(name, parent, callback){\r\n\tif(parent == null){\r\n\t\tparent = \"default\"\r\n\t}\r\n\r\n\ttry{\r\n\t\tvar res = await utils.apiRequest(\"POST\", \"/v1/file/exists\", {\r\n\t\t\tapiKey: this.state.userAPIKey,\r\n\t\t\tparent,\r\n\t\t\tnameHashed: utils.hashFn(name.toLowerCase())\r\n\t\t})\r\n\t}\r\n\tcatch(e){\r\n\t\treturn callback(e)\r\n\t}\r\n\r\n\tif(!res.status){\r\n\t\treturn callback(res.message)\r\n\t}\r\n\r\n\treturn callback(null, res.data.exists, res.data.uuid)\r\n}\r\n\r\nexport async function markUploadAsDone(uuid, uploadKey, tries, maxTries, callback){\r\n\tif(tries >= maxTries){\r\n\t\treturn callback(new Error(\"mark upload as done max tries reached, returning.\"))\r\n\t}\r\n\r\n\ttry{\r\n        var res = await utils.apiRequest(\"POST\", \"/v1/upload/done\", {\r\n\t\t\tuuid,\r\n\t\t\tuploadKey\r\n        })\r\n    }\r\n    catch(e){\r\n\t\tconsole.log(e)\r\n\t\t\r\n\t\treturn setTimeout(() => {\r\n\t\t\tthis.markUploadAsDone(uuid, uploadKey, (tries + 1), maxTries, callback)\r\n\t\t}, 1000)\r\n    }\r\n\r\n    if(!res.status){\r\n        console.log(res.message)\r\n\r\n        return callback(res.message)\r\n    }\r\n\r\n\treturn callback(null)\r\n}\r\n\r\nexport async function uploadChunk(uuid, file, queryParams, data, tries, maxTries, callback){\r\n\tawait window.customVariables.uploadChunkSemaphore.acquire()\r\n\r\n\tif(typeof window.customVariables.stoppedUploads[uuid] !== \"undefined\"){\r\n        return callback(\"stopped\")\r\n    }\r\n\r\n\tfetch(utils.getUploadServer() + \"/v1/upload?\" + queryParams, {\r\n\t\tmethod: \"POST\",\r\n\t\tcache: \"no-cache\",\r\n\t\tbody: data\r\n\t}).then((response) => {\r\n\t\tresponse.json().then((obj) => {\r\n\t\t\tlet res = obj\r\n\r\n\t\t\twindow.customVariables.uploadChunkSemaphore.release()\r\n\r\n\t\t\tif(typeof window.customVariables.stoppedUploads[uuid] !== \"undefined\"){\r\n\t\t\t\treturn callback(\"stopped\")\r\n\t\t\t}\r\n\r\n\t\t\tif(!res){\r\n\t\t\t\treturn setTimeout(() => {\r\n\t\t\t\t\tthis.uploadChunk(uuid, file, queryParams, data, (tries + 1), maxTries, callback)\r\n\t\t\t\t}, 1000)\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(typeof res !== \"object\"){\r\n\t\t\t\t\treturn setTimeout(() => {\r\n\t\t\t\t\t\tthis.uploadChunk(uuid, file, queryParams, data, (tries + 1), maxTries, callback)\r\n\t\t\t\t\t}, 1000)\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tif(!res.status){\r\n\t\t\t\t\t\treturn callback(res.message)\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\treturn callback(null, res, utils.parseQuery(queryParams))\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}).catch((err) => {\r\n\t\t\tconsole.log(err)\r\n\r\n\t\t\twindow.customVariables.uploadChunkSemaphore.release()\r\n\r\n\t\t\treturn setTimeout(() => {\r\n\t\t\t\tthis.uploadChunk(uuid, file, queryParams, data, (tries + 1), maxTries, callback)\r\n\t\t\t}, 1000)\r\n\t\t})\r\n\t}).catch((err) => {\r\n\t\tconsole.log(err)\r\n\r\n\t\twindow.customVariables.uploadChunkSemaphore.release()\r\n\r\n\t\treturn setTimeout(() => {\r\n\t\t\tthis.uploadChunk(uuid, file, queryParams, data, (tries + 1), maxTries, callback)\r\n\t\t}, 1000)\r\n\t})\r\n}\r\n\r\nexport async function queueFileUpload(file){\r\n\tif(Capacitor.isNative){\r\n        if(this.state.settings.onlyWifi){\r\n            let networkStatus = await Plugins.Network.getStatus()\r\n\r\n            if(networkStatus.connectionType !== \"wifi\"){\r\n                return this.spawnToast(language.get(this.state.lang, \"onlyWifiError\"))\r\n            }\r\n        }\r\n    }\r\n\r\n    if(file.size <= 0){\r\n        return this.spawnToast(language.get(this.state.lang, \"uploadInvalidFileSize\", true, [\"__NAME__\"], [file.name]))\r\n\t}\r\n\r\n\tlet parent = utils.currentParentFolder()\r\n\t\r\n\tif(file.name.indexOf(\".\") !== -1){\r\n\t\tlet fileNameEx = file.name.split(\".\")\r\n\t\tlet lowerCaseFileEnding = fileNameEx[fileNameEx.length - 1].toLowerCase()\r\n\t\t\r\n\t\tfileNameEx.pop()\r\n\t\t\r\n\t\tlet fileNameWithLowerCaseEnding = fileNameEx.join(\".\") + \".\" + lowerCaseFileEnding\r\n\r\n\t\tObject.defineProperty(file, \"name\", { writable: true, value: utils.removeIllegalCharsFromString(fileNameWithLowerCaseEnding) })\r\n\t}\r\n\r\n\tif(utils.nameRegex(file.name) || utils.checkIfNameIsBanned(file.name) || utils.fileNameValidationRegex(file.name)){\r\n\t\treturn this.spawnToast(language.get(this.state.lang, \"fileUploadInvalidFileName\", true, [\"__NAME__\"], [file.name]))\r\n\t}\r\n\r\n\tthis.fileExists(file.name, parent, async (err, exists, existsUUID) => {\r\n\t\tif(err){\r\n\t\t\treturn this.spawnToast(language.get(this.state.lang, \"apiRequestError\"))\r\n\t\t}\r\n\r\n\t\tif(exists){\r\n\t\t\treturn this.spawnToast(language.get(this.state.lang, \"fileUploadFileAlreadyExists\", true, [\"__NAME__\"], [file.name]))\r\n\t\t}\r\n\r\n\t\tlet name = file.name\r\n\t\tlet mime = file.type\r\n\t\tlet size = file.size\r\n\t\tlet uuid = utils.uuidv4()\r\n\t\tlet key = utils.generateRandomString(32)\r\n\t\tlet rm = utils.generateRandomString(32)\r\n\t\tlet uploadKey = utils.generateRandomString(32)\r\n\t\tlet expire = \"never\"\r\n\t\tlet chunkSizeToUse = ((1024 * 1024) * 1)\r\n\t\tlet dummyOffset = 0\r\n\t\tlet fileChunks = 0\r\n\r\n\t\twhile(dummyOffset < file.size){\r\n\t\t\tfileChunks++\r\n\t\t\tdummyOffset += chunkSizeToUse\r\n\t\t}\r\n\r\n\t\tlet offset = (0 - chunkSizeToUse)\r\n\t\tlet currentIndex = -1\r\n\r\n\t\tlet nameEnc = utils.cryptoJSEncrypt(name, key)\r\n\t\tlet nameH = utils.hashFn(name.toLowerCase())\r\n\t\tlet mimeEnc = utils.cryptoJSEncrypt(mime, key)\r\n\t\tlet sizeEnc = utils.cryptoJSEncrypt(size.toString(), key)\r\n\t\t\r\n\t\tlet metaData = utils.cryptoJSEncrypt(JSON.stringify({\r\n\t\t\tname,\r\n\t\t\tsize,\r\n\t\t\tmime,\r\n\t\t\tkey\r\n\t\t}), this.state.userMasterKeys[this.state.userMasterKeys.length - 1])\r\n\r\n\t\tlet firstDone = false\r\n\t\tlet doFirst = true\r\n\t\tlet markedAsDone = false\r\n\t\tlet chunksUploaded = 0\r\n\r\n\t\twindow.customVariables.stoppedUploads[uuid] = undefined\r\n    \twindow.customVariables.stoppedUploadsDone[uuid] = undefined\r\n\r\n\t\tconst addToState = () => {\r\n\t\t\tlet currentUploads = this.state.uploads\r\n\r\n\t\t\tcurrentUploads[uuid] = {\r\n\t\t\t\tuuid,\r\n\t\t\t\tsize,\r\n\t\t\t\tchunks: fileChunks,\r\n\t\t\t\tloaded: 0,\r\n\t\t\t\tprogress: 0,\r\n\t\t\t\tname: name \r\n\t\t\t}\r\n\r\n\t\t\twindow.customVariables.uploads[uuid] = {\r\n\t\t\t\tuuid,\r\n\t\t\t\tsize,\r\n\t\t\t\tchunks: fileChunks,\r\n\t\t\t\tloaded: 0,\r\n\t\t\t\tprogress: 0,\r\n\t\t\t\tname: name \r\n\t\t\t}\r\n\r\n\t\t\treturn this.setState({\r\n\t\t\t\tuploads: currentUploads,\r\n\t\t\t\tuploadsCount: (this.state.uploadsCount + 1)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tconst removeFromState = () => {\r\n\t\t\tlet currentUploads = this.state.uploads\r\n\r\n\t\t\tdelete currentUploads[uuid]\r\n\t\t\tdelete window.customVariables.uploads[uuid]\r\n\r\n\t\t\treturn this.setState({\r\n\t\t\t\tuploads: currentUploads,\r\n\t\t\t\tuploadsCount: (this.state.uploadsCount - 1)\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tconst setProgress = (progress) => {\r\n\t\t\ttry{\r\n\t\t\t\tlet currentUploads = this.state.uploads\r\n\r\n\t\t\t\tcurrentUploads[uuid].progress = progress\r\n\t\t\t\twindow.customVariables.uploads[uuid].progress = progress\r\n\r\n\t\t\t\treturn this.setState({\r\n\t\t\t\t\tuploads: currentUploads\r\n\t\t\t\t}, () => {\r\n\t\t\t\t\tthis.forceUpdate()\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t\treturn console.log(e)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst setLoaded = (moreLoaded) => {\r\n\t\t\ttry{\r\n\t\t\t\tlet currentUploads = this.state.uploads\r\n\r\n\t\t\t\tcurrentUploads[uuid].loaded += moreLoaded\r\n\t\t\t\twindow.customVariables.uploads[uuid].loaded += moreLoaded\r\n\r\n\t\t\t\treturn this.setState({\r\n\t\t\t\t\tuploads: currentUploads\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t\treturn console.log(e)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\taddToState()\r\n\r\n\t\tthis.spawnToast(language.get(this.state.lang, \"fileUploadStarted\", true, [\"__NAME__\"], [file.name]))\r\n\r\n\t\tawait window.customVariables.uploadSemaphore.acquire()\r\n\r\n\t\tlet uploadInterval = setInterval(() => {\r\n\t\t\tif(offset < file.size){\r\n\t\t\t\tif(firstDone){\r\n\t\t\t\t\tdoFirst = true\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(doFirst){\r\n\t\t\t\t\tif(!firstDone){\r\n\t\t\t\t\t\tdoFirst = false\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\toffset += chunkSizeToUse\r\n\t\t\t\t\tcurrentIndex += 1\r\n\r\n\t\t\t\t\tlet thisIndex = currentIndex\r\n\t\t\t\t\tlet chunk = file.slice(offset, (offset + chunkSizeToUse))\r\n\r\n\t\t\t\t\tlet fileReader = new FileReader()\r\n\r\n\t\t\t\t\tfileReader.onload = async () => {\r\n\t\t\t\t\t\tlet arrayBuffer = fileReader.result\r\n\r\n\t\t\t\t\t\tworkers.encryptData(uuid, thisIndex, key, arrayBuffer, (encrypted) => {\r\n\t\t\t\t\t\t\tlet blob = encrypted\r\n\r\n\t\t\t\t\t\t\tarrayBuffer = null\r\n\r\n\t\t\t\t\t\t\tlet queryParams = new URLSearchParams({\r\n\t\t\t\t\t\t\t\tapiKey: this.state.userAPIKey,\r\n\t\t\t\t\t\t\t\tuuid: uuid,\r\n\t\t\t\t\t\t\t\tname: nameEnc,\r\n\t\t\t\t\t\t\t\tnameHashed: nameH,\r\n\t\t\t\t\t\t\t\tsize: sizeEnc,\r\n\t\t\t\t\t\t\t\tchunks: fileChunks,\r\n\t\t\t\t\t\t\t\tmime: mimeEnc,\r\n\t\t\t\t\t\t\t\tindex: thisIndex,\r\n\t\t\t\t\t\t\t\trm: rm,\r\n\t\t\t\t\t\t\t\texpire: expire,\r\n\t\t\t\t\t\t\t\tuploadKey: uploadKey,\r\n\t\t\t\t\t\t\t\tmetaData: metaData,\r\n\t\t\t\t\t\t\t\tparent: parent\r\n\t\t\t\t\t\t\t}).toString()\r\n\r\n\t\t\t\t\t\t\tthis.uploadChunk(uuid, file, queryParams, blob, 0, 1000000, (err, res, parsedQueryParams) => {\r\n\t\t\t\t\t\t\t\tif(err){\r\n\t\t\t\t\t\t\t\t\tconsole.log(err)\r\n\r\n\t\t\t\t\t\t\t\t\twindow.customVariables.uploadSemaphore.release()\r\n\r\n\t\t\t\t\t\t\t\t\tremoveFromState()\r\n\r\n\t\t\t\t\t\t\t\t\tif(err == \"stopped\"){\r\n\t\t\t\t\t\t\t\t\t\tif(typeof window.customVariables.stoppedUploadsDone[file.uuid] == \"undefined\"){\r\n\t\t\t\t\t\t\t\t\t\t\twindow.customVariables.stoppedUploadsDone[file.uuid] = true\r\n\r\n\t\t\t\t\t\t\t\t\t\t\treturn this.spawnToast(language.get(this.state.lang, \"uploadStopped\", true, [\"__NAME__\"], [file.name]))\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\t\t\t\treturn false\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\t\t\treturn this.spawnToast(language.get(this.state.lang, \"fileUploadFailed\", true, [\"__NAME__\"], [file.name]))\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tchunksUploaded += 1\r\n\r\n\t\t\t\t\t\t\t\tconsole.log(\"Chunk \" + parsedQueryParams.index + \" uploaded\")\r\n\r\n\t\t\t\t\t\t\t\tif(typeof window.customVariables.uploads[uuid] !== \"undefined\"){\r\n\t\t\t\t\t\t\t\t\tsetLoaded(blob.length)\r\n\r\n\t\t\t\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t\t\t\tlet progress = ((window.customVariables.uploads[uuid].loaded / window.customVariables.uploads[uuid].size) * 100).toFixed(2)\r\n\r\n\t\t\t\t\t\t\t\t\t\tif(progress >= 100){\r\n\t\t\t\t\t\t\t\t\t\t\tprogress = 100\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\tsetProgress(progress)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tcatch(e){\r\n\t\t\t\t\t\t\t\t\t\tconsole.log(e)\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tblob = null\r\n\t\t\t\t\t\t\t\tfirstDone = true\r\n\r\n\t\t\t\t\t\t\t\tif((chunksUploaded - 1) >= fileChunks){\r\n\t\t\t\t\t\t\t\t\tclearInterval(uploadInterval)\r\n\r\n\t\t\t\t\t\t\t\t\tif(!markedAsDone){\r\n\t\t\t\t\t\t\t\t\t\tmarkedAsDone = true\r\n\r\n\t\t\t\t\t\t\t\t\t\tconsole.log(parsedQueryParams.index, fileChunks)\r\n\r\n\t\t\t\t\t\t\t\t\t\tthis.markUploadAsDone(uuid, uploadKey, 0, 1000000, (err) => {\r\n\t\t\t\t\t\t\t\t\t\t\tif(err){\r\n\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(err)\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\twindow.customVariables.uploadSemaphore.release()\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tremoveFromState()\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn this.spawnToast(language.get(this.state.lang, \"fileUploadFailed\", true, [\"__NAME__\"], [file.name]))\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tutils.checkIfItemParentIsBeingShared(parent, \"file\", {\r\n\t\t\t\t\t\t\t\t\t\t\t\tuuid,\r\n\t\t\t\t\t\t\t\t\t\t\t\tname,\r\n\t\t\t\t\t\t\t\t\t\t\t\tsize: parseInt(size),\r\n\t\t\t\t\t\t\t\t\t\t\t\tmime,\r\n\t\t\t\t\t\t\t\t\t\t\t\tkey\r\n\t\t\t\t\t\t\t\t\t\t\t}, () => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tif(utils.currentParentFolder() == parent){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tclearInterval(window.customVariables.reloadContentAfterUploadTimeout)\r\n\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\twindow.customVariables.reloadContentAfterUploadTimeout = setTimeout(() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(utils.currentParentFolder() == parent){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.updateItemList(false)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}, 1000)\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.spawnToast(language.get(this.state.lang, \"fileUploadDone\", true, [\"__NAME__\"], [file.name]))\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\twindow.customVariables.uploadSemaphore.release()\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn removeFromState()\r\n\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfileReader.onerror = (err) => {\r\n\t\t\t\t\t\twindow.customVariables.uploadSemaphore.release()\r\n\r\n\t\t\t\t\t\tconsole.log(err)\r\n\r\n\t\t\t\t\t\tremoveFromState()\r\n\r\n\t\t\t\t\t\treturn this.spawnToast(language.get(this.state.lang, \"fileUploadCouldNotReadFile\", true, [\"__NAME__\"], [file.name]))\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfileReader.readAsArrayBuffer(chunk)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}, 100)\r\n\t})\r\n}"]},"metadata":{},"sourceType":"module"}