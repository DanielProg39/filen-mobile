{"ast":null,"code":"import * as language from \"../utils/language\";\nimport { Plugins } from \"@capacitor/core\";\n\nconst utils = require(\"../utils/utils\");\n\nexport async function updateUserKeys() {\n  if (!this.state.isLoggedIn) {\n    return false;\n  }\n\n  const updateUserKeypair = async (pub, priv, callback) => {\n    try {\n      var res = await utils.apiRequest(\"POST\", \"/v1/user/keyPair/update\", {\n        apiKey: this.state.userAPIKey,\n        publicKey: pub,\n        privateKey: utils.cryptoJSEncrypt(priv, this.state.userMasterKeys[this.state.userMasterKeys.length - 1])\n      });\n    } catch (e) {\n      if (typeof callback == \"function\") {\n        return callback(e);\n      }\n\n      console.log(e);\n      return false;\n    }\n\n    if (!res.status) {\n      if (typeof callback == \"function\") {\n        return callback(res.message);\n      }\n\n      console.log(res.message);\n\n      if (res.message.toLowerCase().indexOf(\"api key not found\") !== -1) {\n        return window.customFunctions.logoutUser();\n      }\n\n      return false;\n    }\n\n    if (typeof callback == \"function\") {\n      return callback(null, true);\n    }\n\n    return true;\n  };\n\n  const setUserKeypair = async (pub, priv, callback) => {\n    try {\n      var res = await utils.apiRequest(\"POST\", \"/v1/user/keyPair/set\", {\n        apiKey: this.state.userAPIKey,\n        publicKey: pub,\n        privateKey: utils.cryptoJSEncrypt(priv, this.state.userMasterKeys[this.state.userMasterKeys.length - 1])\n      });\n    } catch (e) {\n      if (typeof callback == \"function\") {\n        return callback(e);\n      }\n\n      console.log(e);\n      return false;\n    }\n\n    if (!res.status) {\n      if (typeof callback == \"function\") {\n        return callback(res.message);\n      }\n\n      console.log(res.message);\n\n      if (res.message.toLowerCase().indexOf(\"api key not found\") !== -1) {\n        return window.customFunctions.logoutUser();\n      }\n\n      return false;\n    }\n\n    if (typeof callback == \"function\") {\n      return callback(null, true);\n    }\n\n    return true;\n  };\n\n  const updatePubAndPrivKey = async () => {\n    try {\n      var res = await utils.apiRequest(\"POST\", \"/v1/user/keyPair/info\", {\n        apiKey: this.state.userAPIKey\n      });\n    } catch (e) {\n      return console.log(e);\n    }\n\n    if (!res.status) {\n      return console.log(res.message);\n    }\n\n    if (res.data.publicKey.length > 16 && res.data.privateKey.length > 16) {\n      let privKey = \"\";\n      this.state.userMasterKeys.forEach(key => {\n        if (privKey.length == 0) {\n          try {\n            let decrypted = utils.cryptoJSDecrypt(res.data.privateKey, key);\n\n            if (typeof decrypted == \"string\") {\n              if (decrypted.length > 16) {\n                privKey = decrypted;\n              }\n            }\n          } catch (e) {\n            //console.log(e)\n            return;\n          }\n        }\n      });\n\n      if (privKey.length > 16) {\n        await Plugins.Storage.set({\n          key: \"userPublicKey\",\n          value: res.data.publicKey\n        });\n        await Plugins.Storage.set({\n          key: \"userPrivateKey\",\n          value: privKey\n        });\n        this.setState({\n          userPublicKey: res.data.publicKey,\n          userPrivateKey: privKey\n        });\n        console.log(\"Public and private key updated.\");\n        return updateUserKeypair(res.data.publicKey, privKey, err => {\n          if (err) {\n            return console.log(err);\n          }\n\n          return console.log(\"User keypair updated.\");\n        });\n      } else {\n        return console.log(\"Could not decrypt private key\");\n      }\n    } else {\n      try {\n        let generatedKeypair = await window.crypto.subtle.generateKey({\n          name: \"RSA-OAEP\",\n          modulusLength: 4096,\n          publicExponent: new Uint8Array([1, 0, 1]),\n          hash: \"SHA-512\"\n        }, true, [\"encrypt\", \"decrypt\"]);\n        let exportedPubKey = await window.crypto.subtle.exportKey(\"spki\", generatedKeypair.publicKey);\n        let b64PubKey = utils.base64ArrayBuffer(exportedPubKey);\n        let exportedPrivKey = await window.crypto.subtle.exportKey(\"pkcs8\", generatedKeypair.privateKey);\n        let b64PrivKey = utils.base64ArrayBuffer(exportedPrivKey);\n\n        if (b64PubKey.length > 16 && b64PrivKey.length > 16) {\n          setUserKeypair(b64PubKey, b64PrivKey, err => {\n            if (err) {\n              return console.log(err);\n            }\n\n            return console.log(\"User keypair generated and updated.\");\n          });\n        } else {\n          return console.log(\"Key lengths invalid\");\n        }\n      } catch (e) {\n        return console.log(e);\n      }\n    }\n  };\n\n  try {\n    var res = await utils.apiRequest(\"POST\", \"/v1/user/masterKeys\", {\n      apiKey: this.state.userAPIKey,\n      masterKeys: utils.cryptoJSEncrypt(this.state.userMasterKeys.join(\"|\"), this.state.userMasterKeys[this.state.userMasterKeys.length - 1])\n    });\n  } catch (e) {\n    return console.log(e);\n  }\n\n  if (!res.status) {\n    if (res.message.toLowerCase().indexOf(\"api key not found\") !== -1) {\n      return window.customFunctions.logoutUser();\n    }\n\n    return console.log(res.message);\n  }\n\n  let newKeys = \"\";\n  this.state.userMasterKeys.forEach(key => {\n    try {\n      if (newKeys.length == 0) {\n        let decrypted = utils.cryptoJSDecrypt(res.data.keys, key);\n\n        if (typeof decrypted == \"string\") {\n          if (decrypted.length > 16) {\n            newKeys = decrypted;\n          }\n        }\n      } else {\n        return;\n      }\n    } catch (e) {\n      //console.log(e)\n      return;\n    }\n  });\n\n  if (newKeys.length > 16) {\n    await Plugins.Storage.set({\n      key: \"userMasterKeys\",\n      value: JSON.stringify(newKeys.split(\"|\"))\n    });\n    this.setState({\n      userMasterKeys: newKeys.split(\"|\")\n    });\n    window.customVariables.userMasterKeys = newKeys.split(\"|\");\n    console.log(\"Master keys updated.\");\n  } else {\n    console.log(\"Could not decrypt master keys.\");\n  }\n\n  return updatePubAndPrivKey();\n}\nexport async function updateUserUsage() {\n  if (!this.state.isLoggedIn) {\n    return false;\n  }\n\n  try {\n    var res = await utils.apiRequest(\"POST\", \"/v1/user/usage\", {\n      apiKey: this.state.userAPIKey\n    });\n  } catch (e) {\n    return console.log(e);\n  }\n\n  if (!res.status) {\n    console.log(res.message);\n\n    if (res.message.toLowerCase().indexOf(\"api key not found\") !== -1) {\n      return window.customFunctions.logoutUser();\n    }\n\n    return false;\n  }\n\n  let storageUsedPercent = (res.data.storage / res.data.max * 100).toFixed(2);\n  return this.setState({\n    userStorageUsagePercentage: storageUsedPercent,\n    userStorageUsageMenuText: language.get(this.state.lang, \"userStorageUsageMenuText\", false, [\"__MAX__\", \"__PERCENTAGE__\"], [utils.formatBytes(res.data.max), storageUsedPercent]),\n    userCurrentStorageUsage: res.data.storage,\n    userMaxStorage: res.data.max\n  });\n}","map":{"version":3,"sources":["/Users/jan/Documents/filen/app/src/components/user.js"],"names":["language","Plugins","utils","require","updateUserKeys","state","isLoggedIn","updateUserKeypair","pub","priv","callback","res","apiRequest","apiKey","userAPIKey","publicKey","privateKey","cryptoJSEncrypt","userMasterKeys","length","e","console","log","status","message","toLowerCase","indexOf","window","customFunctions","logoutUser","setUserKeypair","updatePubAndPrivKey","data","privKey","forEach","key","decrypted","cryptoJSDecrypt","Storage","set","value","setState","userPublicKey","userPrivateKey","err","generatedKeypair","crypto","subtle","generateKey","name","modulusLength","publicExponent","Uint8Array","hash","exportedPubKey","exportKey","b64PubKey","base64ArrayBuffer","exportedPrivKey","b64PrivKey","masterKeys","join","newKeys","keys","JSON","stringify","split","customVariables","updateUserUsage","storageUsedPercent","storage","max","toFixed","userStorageUsagePercentage","userStorageUsageMenuText","get","lang","formatBytes","userCurrentStorageUsage","userMaxStorage"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,mBAA1B;AACA,SAASC,OAAT,QAAwB,iBAAxB;;AAEA,MAAMC,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAArB;;AAEA,OAAO,eAAeC,cAAf,GAA+B;AAClC,MAAG,CAAC,KAAKC,KAAL,CAAWC,UAAf,EAA0B;AACtB,WAAO,KAAP;AACH;;AAED,QAAMC,iBAAiB,GAAG,OAAOC,GAAP,EAAYC,IAAZ,EAAkBC,QAAlB,KAA+B;AACrD,QAAG;AACC,UAAIC,GAAG,GAAG,MAAMT,KAAK,CAACU,UAAN,CAAiB,MAAjB,EAAyB,yBAAzB,EAAoD;AAChEC,QAAAA,MAAM,EAAE,KAAKR,KAAL,CAAWS,UAD6C;AAEhEC,QAAAA,SAAS,EAAEP,GAFqD;AAGhEQ,QAAAA,UAAU,EAAEd,KAAK,CAACe,eAAN,CAAsBR,IAAtB,EAA4B,KAAKJ,KAAL,CAAWa,cAAX,CAA0B,KAAKb,KAAL,CAAWa,cAAX,CAA0BC,MAA1B,GAAmC,CAA7D,CAA5B;AAHoD,OAApD,CAAhB;AAKH,KAND,CAOA,OAAMC,CAAN,EAAQ;AACJ,UAAG,OAAOV,QAAP,IAAmB,UAAtB,EAAiC;AAC7B,eAAOA,QAAQ,CAACU,CAAD,CAAf;AACH;;AAEDC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAEA,aAAO,KAAP;AACH;;AAED,QAAG,CAACT,GAAG,CAACY,MAAR,EAAe;AACX,UAAG,OAAOb,QAAP,IAAmB,UAAtB,EAAiC;AAC7B,eAAOA,QAAQ,CAACC,GAAG,CAACa,OAAL,CAAf;AACH;;AAEDH,MAAAA,OAAO,CAACC,GAAR,CAAYX,GAAG,CAACa,OAAhB;;AAEA,UAAGb,GAAG,CAACa,OAAJ,CAAYC,WAAZ,GAA0BC,OAA1B,CAAkC,mBAAlC,MAA2D,CAAC,CAA/D,EAAiE;AAC7D,eAAOC,MAAM,CAACC,eAAP,CAAuBC,UAAvB,EAAP;AACH;;AAED,aAAO,KAAP;AACH;;AAED,QAAG,OAAOnB,QAAP,IAAmB,UAAtB,EAAiC;AAC7B,aAAOA,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;AACH;;AAED,WAAO,IAAP;AACH,GArCD;;AAuCA,QAAMoB,cAAc,GAAG,OAAOtB,GAAP,EAAYC,IAAZ,EAAkBC,QAAlB,KAA+B;AAClD,QAAG;AACC,UAAIC,GAAG,GAAG,MAAMT,KAAK,CAACU,UAAN,CAAiB,MAAjB,EAAyB,sBAAzB,EAAiD;AAC7DC,QAAAA,MAAM,EAAE,KAAKR,KAAL,CAAWS,UAD0C;AAE7DC,QAAAA,SAAS,EAAEP,GAFkD;AAG7DQ,QAAAA,UAAU,EAAEd,KAAK,CAACe,eAAN,CAAsBR,IAAtB,EAA4B,KAAKJ,KAAL,CAAWa,cAAX,CAA0B,KAAKb,KAAL,CAAWa,cAAX,CAA0BC,MAA1B,GAAmC,CAA7D,CAA5B;AAHiD,OAAjD,CAAhB;AAKH,KAND,CAOA,OAAMC,CAAN,EAAQ;AACJ,UAAG,OAAOV,QAAP,IAAmB,UAAtB,EAAiC;AAC7B,eAAOA,QAAQ,CAACU,CAAD,CAAf;AACH;;AAEDC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAEA,aAAO,KAAP;AACH;;AAED,QAAG,CAACT,GAAG,CAACY,MAAR,EAAe;AACX,UAAG,OAAOb,QAAP,IAAmB,UAAtB,EAAiC;AAC7B,eAAOA,QAAQ,CAACC,GAAG,CAACa,OAAL,CAAf;AACH;;AAEDH,MAAAA,OAAO,CAACC,GAAR,CAAYX,GAAG,CAACa,OAAhB;;AAEA,UAAGb,GAAG,CAACa,OAAJ,CAAYC,WAAZ,GAA0BC,OAA1B,CAAkC,mBAAlC,MAA2D,CAAC,CAA/D,EAAiE;AAC7D,eAAOC,MAAM,CAACC,eAAP,CAAuBC,UAAvB,EAAP;AACH;;AAED,aAAO,KAAP;AACH;;AAED,QAAG,OAAOnB,QAAP,IAAmB,UAAtB,EAAiC;AAC7B,aAAOA,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAf;AACH;;AAED,WAAO,IAAP;AACH,GArCD;;AAuCA,QAAMqB,mBAAmB,GAAG,YAAY;AACpC,QAAG;AACC,UAAIpB,GAAG,GAAG,MAAMT,KAAK,CAACU,UAAN,CAAiB,MAAjB,EAAyB,uBAAzB,EAAkD;AAC9DC,QAAAA,MAAM,EAAE,KAAKR,KAAL,CAAWS;AAD2C,OAAlD,CAAhB;AAGH,KAJD,CAKA,OAAMM,CAAN,EAAQ;AACJ,aAAOC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAAP;AACH;;AAED,QAAG,CAACT,GAAG,CAACY,MAAR,EAAe;AACX,aAAOF,OAAO,CAACC,GAAR,CAAYX,GAAG,CAACa,OAAhB,CAAP;AACH;;AAED,QAAGb,GAAG,CAACqB,IAAJ,CAASjB,SAAT,CAAmBI,MAAnB,GAA4B,EAA5B,IAAkCR,GAAG,CAACqB,IAAJ,CAAShB,UAAT,CAAoBG,MAApB,GAA6B,EAAlE,EAAqE;AACjE,UAAIc,OAAO,GAAG,EAAd;AAEA,WAAK5B,KAAL,CAAWa,cAAX,CAA0BgB,OAA1B,CAAmCC,GAAD,IAAS;AACvC,YAAGF,OAAO,CAACd,MAAR,IAAkB,CAArB,EAAuB;AACnB,cAAG;AACC,gBAAIiB,SAAS,GAAGlC,KAAK,CAACmC,eAAN,CAAsB1B,GAAG,CAACqB,IAAJ,CAAShB,UAA/B,EAA2CmB,GAA3C,CAAhB;;AAEA,gBAAG,OAAOC,SAAP,IAAoB,QAAvB,EAAgC;AAC5B,kBAAGA,SAAS,CAACjB,MAAV,GAAmB,EAAtB,EAAyB;AACrBc,gBAAAA,OAAO,GAAGG,SAAV;AACH;AACJ;AACJ,WARD,CASA,OAAMhB,CAAN,EAAQ;AACJ;AAEA;AACH;AACJ;AACJ,OAjBD;;AAmBA,UAAGa,OAAO,CAACd,MAAR,GAAiB,EAApB,EAAuB;AACnB,cAAMlB,OAAO,CAACqC,OAAR,CAAgBC,GAAhB,CAAoB;AAAEJ,UAAAA,GAAG,EAAE,eAAP;AAAwBK,UAAAA,KAAK,EAAE7B,GAAG,CAACqB,IAAJ,CAASjB;AAAxC,SAApB,CAAN;AACA,cAAMd,OAAO,CAACqC,OAAR,CAAgBC,GAAhB,CAAoB;AAAEJ,UAAAA,GAAG,EAAE,gBAAP;AAAyBK,UAAAA,KAAK,EAAEP;AAAhC,SAApB,CAAN;AAEA,aAAKQ,QAAL,CAAc;AACVC,UAAAA,aAAa,EAAE/B,GAAG,CAACqB,IAAJ,CAASjB,SADd;AAEV4B,UAAAA,cAAc,EAAEV;AAFN,SAAd;AAKAZ,QAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AAEA,eAAOf,iBAAiB,CAACI,GAAG,CAACqB,IAAJ,CAASjB,SAAV,EAAqBkB,OAArB,EAA+BW,GAAD,IAAS;AAC3D,cAAGA,GAAH,EAAO;AACH,mBAAOvB,OAAO,CAACC,GAAR,CAAYsB,GAAZ,CAAP;AACH;;AAED,iBAAOvB,OAAO,CAACC,GAAR,CAAY,uBAAZ,CAAP;AACH,SANuB,CAAxB;AAOH,OAlBD,MAmBI;AACA,eAAOD,OAAO,CAACC,GAAR,CAAY,+BAAZ,CAAP;AACH;AACJ,KA5CD,MA6CI;AACA,UAAG;AACC,YAAIuB,gBAAgB,GAAG,MAAMlB,MAAM,CAACmB,MAAP,CAAcC,MAAd,CAAqBC,WAArB,CAAiC;AAC1DC,UAAAA,IAAI,EAAE,UADoD;AAE1DC,UAAAA,aAAa,EAAE,IAF2C;AAG1DC,UAAAA,cAAc,EAAE,IAAIC,UAAJ,CAAe,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAf,CAH0C;AAI1DC,UAAAA,IAAI,EAAE;AAJoD,SAAjC,EAK1B,IAL0B,EAKpB,CAAC,SAAD,EAAY,SAAZ,CALoB,CAA7B;AAOA,YAAIC,cAAc,GAAG,MAAM3B,MAAM,CAACmB,MAAP,CAAcC,MAAd,CAAqBQ,SAArB,CAA+B,MAA/B,EAAuCV,gBAAgB,CAAC9B,SAAxD,CAA3B;AACA,YAAIyC,SAAS,GAAGtD,KAAK,CAACuD,iBAAN,CAAwBH,cAAxB,CAAhB;AAEA,YAAII,eAAe,GAAG,MAAM/B,MAAM,CAACmB,MAAP,CAAcC,MAAd,CAAqBQ,SAArB,CAA+B,OAA/B,EAAwCV,gBAAgB,CAAC7B,UAAzD,CAA5B;AACA,YAAI2C,UAAU,GAAGzD,KAAK,CAACuD,iBAAN,CAAwBC,eAAxB,CAAjB;;AAEA,YAAGF,SAAS,CAACrC,MAAV,GAAmB,EAAnB,IAAyBwC,UAAU,CAACxC,MAAX,GAAoB,EAAhD,EAAmD;AAC/CW,UAAAA,cAAc,CAAC0B,SAAD,EAAYG,UAAZ,EAAyBf,GAAD,IAAS;AAC3C,gBAAGA,GAAH,EAAO;AACH,qBAAOvB,OAAO,CAACC,GAAR,CAAYsB,GAAZ,CAAP;AACH;;AAED,mBAAOvB,OAAO,CAACC,GAAR,CAAY,qCAAZ,CAAP;AACH,WANa,CAAd;AAOH,SARD,MASI;AACA,iBAAOD,OAAO,CAACC,GAAR,CAAY,qBAAZ,CAAP;AACH;AACJ,OA1BD,CA2BA,OAAMF,CAAN,EAAQ;AACJ,eAAOC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAAP;AACH;AACJ;AACJ,GA3FD;;AA6FA,MAAG;AACC,QAAIT,GAAG,GAAG,MAAMT,KAAK,CAACU,UAAN,CAAiB,MAAjB,EAAyB,qBAAzB,EAAgD;AAC5DC,MAAAA,MAAM,EAAE,KAAKR,KAAL,CAAWS,UADyC;AAE5D8C,MAAAA,UAAU,EAAE1D,KAAK,CAACe,eAAN,CAAsB,KAAKZ,KAAL,CAAWa,cAAX,CAA0B2C,IAA1B,CAA+B,GAA/B,CAAtB,EAA2D,KAAKxD,KAAL,CAAWa,cAAX,CAA0B,KAAKb,KAAL,CAAWa,cAAX,CAA0BC,MAA1B,GAAmC,CAA7D,CAA3D;AAFgD,KAAhD,CAAhB;AAIH,GALD,CAMA,OAAMC,CAAN,EAAQ;AACJ,WAAOC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAAP;AACH;;AAED,MAAG,CAACT,GAAG,CAACY,MAAR,EAAe;AACX,QAAGZ,GAAG,CAACa,OAAJ,CAAYC,WAAZ,GAA0BC,OAA1B,CAAkC,mBAAlC,MAA2D,CAAC,CAA/D,EAAiE;AAC7D,aAAOC,MAAM,CAACC,eAAP,CAAuBC,UAAvB,EAAP;AACH;;AAED,WAAOR,OAAO,CAACC,GAAR,CAAYX,GAAG,CAACa,OAAhB,CAAP;AACH;;AAED,MAAIsC,OAAO,GAAG,EAAd;AAEA,OAAKzD,KAAL,CAAWa,cAAX,CAA0BgB,OAA1B,CAAmCC,GAAD,IAAS;AACvC,QAAG;AACC,UAAG2B,OAAO,CAAC3C,MAAR,IAAkB,CAArB,EAAuB;AACnB,YAAIiB,SAAS,GAAGlC,KAAK,CAACmC,eAAN,CAAsB1B,GAAG,CAACqB,IAAJ,CAAS+B,IAA/B,EAAqC5B,GAArC,CAAhB;;AAEA,YAAG,OAAOC,SAAP,IAAoB,QAAvB,EAAgC;AAC5B,cAAGA,SAAS,CAACjB,MAAV,GAAmB,EAAtB,EAAyB;AACrB2C,YAAAA,OAAO,GAAG1B,SAAV;AACH;AACJ;AACJ,OARD,MASI;AACA;AACH;AACJ,KAbD,CAcA,OAAMhB,CAAN,EAAQ;AACJ;AAEA;AACH;AACJ,GApBD;;AAsBA,MAAG0C,OAAO,CAAC3C,MAAR,GAAiB,EAApB,EAAuB;AACnB,UAAMlB,OAAO,CAACqC,OAAR,CAAgBC,GAAhB,CAAoB;AAAEJ,MAAAA,GAAG,EAAE,gBAAP;AAAyBK,MAAAA,KAAK,EAAEwB,IAAI,CAACC,SAAL,CAAeH,OAAO,CAACI,KAAR,CAAc,GAAd,CAAf;AAAhC,KAApB,CAAN;AAEA,SAAKzB,QAAL,CAAc;AACVvB,MAAAA,cAAc,EAAE4C,OAAO,CAACI,KAAR,CAAc,GAAd;AADN,KAAd;AAIAvC,IAAAA,MAAM,CAACwC,eAAP,CAAuBjD,cAAvB,GAAwC4C,OAAO,CAACI,KAAR,CAAc,GAAd,CAAxC;AAEA7C,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH,GAVD,MAWI;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACH;;AAED,SAAOS,mBAAmB,EAA1B;AACH;AAED,OAAO,eAAeqC,eAAf,GAAgC;AACnC,MAAG,CAAC,KAAK/D,KAAL,CAAWC,UAAf,EAA0B;AACtB,WAAO,KAAP;AACH;;AAED,MAAG;AACC,QAAIK,GAAG,GAAG,MAAMT,KAAK,CAACU,UAAN,CAAiB,MAAjB,EAAyB,gBAAzB,EAA2C;AACvDC,MAAAA,MAAM,EAAE,KAAKR,KAAL,CAAWS;AADoC,KAA3C,CAAhB;AAGH,GAJD,CAKA,OAAMM,CAAN,EAAQ;AACJ,WAAOC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAAP;AACH;;AAED,MAAG,CAACT,GAAG,CAACY,MAAR,EAAe;AACXF,IAAAA,OAAO,CAACC,GAAR,CAAYX,GAAG,CAACa,OAAhB;;AAEA,QAAGb,GAAG,CAACa,OAAJ,CAAYC,WAAZ,GAA0BC,OAA1B,CAAkC,mBAAlC,MAA2D,CAAC,CAA/D,EAAiE;AAC7D,aAAOC,MAAM,CAACC,eAAP,CAAuBC,UAAvB,EAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAED,MAAIwC,kBAAkB,GAAG,CAAE1D,GAAG,CAACqB,IAAJ,CAASsC,OAAT,GAAmB3D,GAAG,CAACqB,IAAJ,CAASuC,GAA7B,GAAoC,GAArC,EAA0CC,OAA1C,CAAkD,CAAlD,CAAzB;AAEA,SAAO,KAAK/B,QAAL,CAAc;AACjBgC,IAAAA,0BAA0B,EAAEJ,kBADX;AAEjBK,IAAAA,wBAAwB,EAAE1E,QAAQ,CAAC2E,GAAT,CAAa,KAAKtE,KAAL,CAAWuE,IAAxB,EAA8B,0BAA9B,EAA0D,KAA1D,EAAiE,CAAC,SAAD,EAAY,gBAAZ,CAAjE,EAAgG,CAAC1E,KAAK,CAAC2E,WAAN,CAAkBlE,GAAG,CAACqB,IAAJ,CAASuC,GAA3B,CAAD,EAAkCF,kBAAlC,CAAhG,CAFT;AAGvBS,IAAAA,uBAAuB,EAAEnE,GAAG,CAACqB,IAAJ,CAASsC,OAHX;AAIvBS,IAAAA,cAAc,EAAEpE,GAAG,CAACqB,IAAJ,CAASuC;AAJF,GAAd,CAAP;AAMH","sourcesContent":["import * as language from \"../utils/language\"\r\nimport { Plugins } from \"@capacitor/core\"\r\n\r\nconst utils = require(\"../utils/utils\")\r\n\r\nexport async function updateUserKeys(){\r\n    if(!this.state.isLoggedIn){\r\n        return false\r\n    }\r\n\r\n    const updateUserKeypair = async (pub, priv, callback) => {\r\n        try{\r\n            var res = await utils.apiRequest(\"POST\", \"/v1/user/keyPair/update\", {\r\n                apiKey: this.state.userAPIKey,\r\n                publicKey: pub,\r\n                privateKey: utils.cryptoJSEncrypt(priv, this.state.userMasterKeys[this.state.userMasterKeys.length - 1])\r\n            })\r\n        }\r\n        catch(e){\r\n            if(typeof callback == \"function\"){\r\n                return callback(e)\r\n            }\r\n\r\n            console.log(e)\r\n\r\n            return false\r\n        }\r\n\r\n        if(!res.status){\r\n            if(typeof callback == \"function\"){\r\n                return callback(res.message)\r\n            }\r\n\r\n            console.log(res.message)\r\n\r\n            if(res.message.toLowerCase().indexOf(\"api key not found\") !== -1){\r\n                return window.customFunctions.logoutUser()\r\n            }\r\n\r\n            return false\r\n        }\r\n\r\n        if(typeof callback == \"function\"){\r\n            return callback(null, true)\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    const setUserKeypair = async (pub, priv, callback) => {\r\n        try{\r\n            var res = await utils.apiRequest(\"POST\", \"/v1/user/keyPair/set\", {\r\n                apiKey: this.state.userAPIKey,\r\n                publicKey: pub,\r\n                privateKey: utils.cryptoJSEncrypt(priv, this.state.userMasterKeys[this.state.userMasterKeys.length - 1])\r\n            })\r\n        }\r\n        catch(e){\r\n            if(typeof callback == \"function\"){\r\n                return callback(e)\r\n            }\r\n\r\n            console.log(e)\r\n\r\n            return false\r\n        }\r\n\r\n        if(!res.status){\r\n            if(typeof callback == \"function\"){\r\n                return callback(res.message)\r\n            }\r\n\r\n            console.log(res.message)\r\n\r\n            if(res.message.toLowerCase().indexOf(\"api key not found\") !== -1){\r\n                return window.customFunctions.logoutUser()\r\n            }\r\n\r\n            return false\r\n        }\r\n\r\n        if(typeof callback == \"function\"){\r\n            return callback(null, true)\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    const updatePubAndPrivKey = async () => {\r\n        try{\r\n            var res = await utils.apiRequest(\"POST\", \"/v1/user/keyPair/info\", {\r\n                apiKey: this.state.userAPIKey\r\n            })\r\n        }\r\n        catch(e){\r\n            return console.log(e)\r\n        }\r\n\r\n        if(!res.status){\r\n            return console.log(res.message)\r\n        }\r\n\r\n        if(res.data.publicKey.length > 16 && res.data.privateKey.length > 16){\r\n            let privKey = \"\"\r\n\r\n            this.state.userMasterKeys.forEach((key) => {\r\n                if(privKey.length == 0){\r\n                    try{\r\n                        let decrypted = utils.cryptoJSDecrypt(res.data.privateKey, key)\r\n\r\n                        if(typeof decrypted == \"string\"){\r\n                            if(decrypted.length > 16){\r\n                                privKey = decrypted\r\n                            }\r\n                        }\r\n                    }\r\n                    catch(e){\r\n                        //console.log(e)\r\n\r\n                        return\r\n                    }\r\n                }\r\n            })\r\n\r\n            if(privKey.length > 16){\r\n                await Plugins.Storage.set({ key: \"userPublicKey\", value: res.data.publicKey })\r\n                await Plugins.Storage.set({ key: \"userPrivateKey\", value: privKey })\r\n\r\n                this.setState({\r\n                    userPublicKey: res.data.publicKey,\r\n                    userPrivateKey: privKey\r\n                })\r\n\r\n                console.log(\"Public and private key updated.\")\r\n\r\n                return updateUserKeypair(res.data.publicKey, privKey, (err) => {\r\n                    if(err){\r\n                        return console.log(err)\r\n                    }\r\n\r\n                    return console.log(\"User keypair updated.\")\r\n                })\r\n            }\r\n            else{\r\n                return console.log(\"Could not decrypt private key\")\r\n            }\r\n        }\r\n        else{\r\n            try{\r\n                let generatedKeypair = await window.crypto.subtle.generateKey({\r\n                    name: \"RSA-OAEP\",\r\n                    modulusLength: 4096,\r\n                    publicExponent: new Uint8Array([1, 0, 1]),\r\n                    hash: \"SHA-512\"\r\n                }, true, [\"encrypt\", \"decrypt\"])\r\n\r\n                let exportedPubKey = await window.crypto.subtle.exportKey(\"spki\", generatedKeypair.publicKey)\r\n                let b64PubKey = utils.base64ArrayBuffer(exportedPubKey)\r\n\r\n                let exportedPrivKey = await window.crypto.subtle.exportKey(\"pkcs8\", generatedKeypair.privateKey)\r\n                let b64PrivKey = utils.base64ArrayBuffer(exportedPrivKey)\r\n\r\n                if(b64PubKey.length > 16 && b64PrivKey.length > 16){\r\n                    setUserKeypair(b64PubKey, b64PrivKey, (err) => {\r\n                        if(err){\r\n                            return console.log(err)\r\n                        }\r\n\r\n                        return console.log(\"User keypair generated and updated.\")\r\n                    })\r\n                }\r\n                else{\r\n                    return console.log(\"Key lengths invalid\")\r\n                }\r\n            }\r\n            catch(e){\r\n                return console.log(e)\r\n            }\r\n        }\r\n    }\r\n\r\n    try{\r\n        var res = await utils.apiRequest(\"POST\", \"/v1/user/masterKeys\", {\r\n            apiKey: this.state.userAPIKey,\r\n            masterKeys: utils.cryptoJSEncrypt(this.state.userMasterKeys.join(\"|\"), this.state.userMasterKeys[this.state.userMasterKeys.length - 1])\r\n        })\r\n    }\r\n    catch(e){\r\n        return console.log(e)\r\n    }\r\n\r\n    if(!res.status){\r\n        if(res.message.toLowerCase().indexOf(\"api key not found\") !== -1){\r\n            return window.customFunctions.logoutUser()\r\n        }\r\n\r\n        return console.log(res.message)\r\n    }\r\n\r\n    let newKeys = \"\"\r\n\r\n    this.state.userMasterKeys.forEach((key) => {\r\n        try{\r\n            if(newKeys.length == 0){\r\n                let decrypted = utils.cryptoJSDecrypt(res.data.keys, key)\r\n\r\n                if(typeof decrypted == \"string\"){\r\n                    if(decrypted.length > 16){\r\n                        newKeys = decrypted\r\n                    }\r\n                }\r\n            }\r\n            else{\r\n                return\r\n            }\r\n        }\r\n        catch(e){\r\n            //console.log(e)\r\n\r\n            return\r\n        }\r\n    })\r\n\r\n    if(newKeys.length > 16){\r\n        await Plugins.Storage.set({ key: \"userMasterKeys\", value: JSON.stringify(newKeys.split(\"|\")) })\r\n\r\n        this.setState({\r\n            userMasterKeys: newKeys.split(\"|\")\r\n        })\r\n\r\n        window.customVariables.userMasterKeys = newKeys.split(\"|\")\r\n\r\n        console.log(\"Master keys updated.\")\r\n    }\r\n    else{\r\n        console.log(\"Could not decrypt master keys.\")\r\n    }\r\n\r\n    return updatePubAndPrivKey()\r\n}\r\n\r\nexport async function updateUserUsage(){\r\n    if(!this.state.isLoggedIn){\r\n        return false\r\n    }\r\n\r\n    try{\r\n        var res = await utils.apiRequest(\"POST\", \"/v1/user/usage\", {\r\n            apiKey: this.state.userAPIKey\r\n        })\r\n    }\r\n    catch(e){\r\n        return console.log(e)\r\n    }\r\n\r\n    if(!res.status){\r\n        console.log(res.message)\r\n\r\n        if(res.message.toLowerCase().indexOf(\"api key not found\") !== -1){\r\n            return window.customFunctions.logoutUser()\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    let storageUsedPercent = ((res.data.storage / res.data.max) * 100).toFixed(2)\r\n\r\n    return this.setState({\r\n        userStorageUsagePercentage: storageUsedPercent,\r\n        userStorageUsageMenuText: language.get(this.state.lang, \"userStorageUsageMenuText\", false, [\"__MAX__\", \"__PERCENTAGE__\"], [utils.formatBytes(res.data.max), storageUsedPercent]),\r\n\t\tuserCurrentStorageUsage: res.data.storage,\r\n\t\tuserMaxStorage: res.data.max\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}