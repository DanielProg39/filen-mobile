{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\n\nvar FileOpenerOriginal =\n/** @class */\nfunction (_super) {\n  __extends(FileOpenerOriginal, _super);\n\n  function FileOpenerOriginal() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  FileOpenerOriginal.prototype.open = function (filePath, fileMIMEType) {\n    return cordova(this, \"open\", {\n      \"callbackStyle\": \"object\",\n      \"successName\": \"success\",\n      \"errorName\": \"error\"\n    }, arguments);\n  };\n\n  FileOpenerOriginal.prototype.uninstall = function (packageId) {\n    return cordova(this, \"uninstall\", {\n      \"callbackStyle\": \"object\",\n      \"successName\": \"success\",\n      \"errorName\": \"error\"\n    }, arguments);\n  };\n\n  FileOpenerOriginal.prototype.appIsInstalled = function (packageId) {\n    return cordova(this, \"appIsInstalled\", {\n      \"callbackStyle\": \"object\",\n      \"successName\": \"success\",\n      \"errorName\": \"error\"\n    }, arguments);\n  };\n\n  FileOpenerOriginal.prototype.showOpenWithDialog = function (filePath, fileMIMEType) {\n    return cordova(this, \"showOpenWithDialog\", {\n      \"callbackStyle\": \"object\",\n      \"successName\": \"success\",\n      \"errorName\": \"error\"\n    }, arguments);\n  };\n\n  FileOpenerOriginal.pluginName = \"FileOpener\";\n  FileOpenerOriginal.plugin = \"cordova-plugin-file-opener2\";\n  FileOpenerOriginal.pluginRef = \"cordova.plugins.fileOpener2\";\n  FileOpenerOriginal.repo = \"https://github.com/pwlin/cordova-plugin-file-opener2\";\n  FileOpenerOriginal.platforms = [\"Android\", \"iOS\", \"Windows\", \"Windows Phone 8\"];\n  return FileOpenerOriginal;\n}(IonicNativePlugin);\n\nvar FileOpener = new FileOpenerOriginal();\nexport { FileOpener };","map":{"version":3,"sources":["../../../../src/@ionic-native/plugins/file-opener/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAO,iBAAP,EAAO,OAAP,QAAmD,oBAAnD;;;;;AAiCgC,EAAA,SAAA,CAAA,kBAAA,EAAiB,MAAjB,CAAA;;;;;;AAY9B,EAAA,kBAAA,CAAA,SAAA,CAAI,IAAJ,GAAI,UAAiB,QAAjB,EAAmB,YAAnB,EAAuC;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,MAAA,EAAA;AAAA,uBAAA,QAAA;AAAA,qBAAA,SAAA;AAAA,mBAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAA3C;;AAcA,EAAA,kBAAA,CAAA,SAAA,CAAA,SAAA,GAAS,UAAC,SAAD,EAAkB;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,WAAA,EAAA;AAAA,uBAAA,QAAA;AAAA,qBAAA,SAAA;AAAA,mBAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAA3B;;AAcA,EAAA,kBAAA,CAAA,SAAA,CAAA,cAAA,GAAc,UAAC,SAAD,EAAkB;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,gBAAA,EAAA;AAAA,uBAAA,QAAA;AAAA,qBAAA,SAAA;AAAA,mBAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAhC;;AAeA,EAAA,kBAAA,CAAA,SAAA,CAAA,kBAAA,GAAkB,UAAiB,QAAjB,EAAmB,YAAnB,EAAuC;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,oBAAA,EAAA;AAAA,uBAAA,QAAA;AAAA,qBAAA,SAAA;AAAA,mBAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAzD;;;;;;;SAzFF,kB;EAkCgC,iB;;IAAnB,UAAA,GAAA,IAAU,kBAAV,E","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\n/**\n * @name File Opener\n * @description\n * This plugin will open a file on your device file system with its default application.\n *\n * @usage\n * ```typescript\n * import { FileOpener } from '@ionic-native/file-opener/ngx';\n *\n * constructor(private fileOpener: FileOpener) { }\n *\n * ...\n *\n * this.fileOpener.open('path/to/file.pdf', 'application/pdf')\n *   .then(() => console.log('File is opened'))\n *   .catch(e => console.log('Error opening file', e));\n *\n * this.fileOpener.showOpenWithDialog('path/to/file.pdf', 'application/pdf')\n *   .then(() => console.log('File is opened'))\n *   .catch(e => console.log('Error opening file', e));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'FileOpener',\n  plugin: 'cordova-plugin-file-opener2',\n  pluginRef: 'cordova.plugins.fileOpener2',\n  repo: 'https://github.com/pwlin/cordova-plugin-file-opener2',\n  platforms: ['Android', 'iOS', 'Windows', 'Windows Phone 8'],\n})\n@Injectable()\nexport class FileOpener extends IonicNativePlugin {\n  /**\n   * Open an file\n   * @param {string} filePath File Path\n   * @param {string} fileMIMEType File MIME Type\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    callbackStyle: 'object',\n    successName: 'success',\n    errorName: 'error',\n  })\n  open(filePath: string, fileMIMEType: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Uninstalls a package\n   * @param {string} packageId Package ID\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    callbackStyle: 'object',\n    successName: 'success',\n    errorName: 'error',\n  })\n  uninstall(packageId: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Check if an app is already installed\n   * @param {string} packageId Package ID\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    callbackStyle: 'object',\n    successName: 'success',\n    errorName: 'error',\n  })\n  appIsInstalled(packageId: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Opens with system modal to open file with an already installed app.\n   * @param {string} filePath File Path\n   * @param {string} fileMIMEType File MIME Type\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    callbackStyle: 'object',\n    successName: 'success',\n    errorName: 'error',\n  })\n  showOpenWithDialog(filePath: string, fileMIMEType: string): Promise<any> {\n    return;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}