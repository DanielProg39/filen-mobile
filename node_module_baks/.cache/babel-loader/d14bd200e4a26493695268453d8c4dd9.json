{"ast":null,"code":"const en = require(\"../lang/en\");\n\nconst nl = require(\"../lang/nl\");\n\nconst hi = require(\"../lang/hi\");\n\nconst de = require(\"../lang/de\");\n\nconst fr = require(\"../lang/fr\");\n\nconst da = require(\"../lang/da\");\n\nconst es = require(\"../lang/es\");\n\nlet translations = {};\ntranslations['en'] = en.translations['en'];\ntranslations['nl'] = nl.translations['nl'];\ntranslations['hi'] = hi.translations['hi'];\ntranslations['de'] = de.translations['de'];\ntranslations['fr'] = fr.translations['fr'];\ntranslations['da'] = da.translations['da'];\ntranslations['es'] = es.translations['es'];\nmodule.exports = {\n  get: (lang = \"en\", text, firstUpperCase = true, replaceFrom = [], replaceTo = []) => {\n    let gotText = translations[lang][text];\n\n    if (!gotText) {\n      if (translations['en'][text]) {\n        gotText = translations['en'][text];\n      } else {\n        return \"NO_TRANSLATION_FOUND\";\n      }\n    }\n\n    if (firstUpperCase) {\n      gotText = gotText.charAt(0).toUpperCase() + gotText.slice(1);\n    }\n\n    if (replaceFrom.length > 0 && replaceTo.length > 0) {\n      for (let i = 0; i < replaceFrom.length; i++) {\n        gotText = gotText.split(replaceFrom[i]).join(replaceTo[i]);\n      }\n    }\n\n    return gotText;\n  },\n  isAvailable: lang => {\n    if (typeof translations[lang] !== \"undefined\") {\n      return true;\n    }\n\n    return false;\n  },\n  list: () => {\n    return translations;\n  },\n  name: (lang = \"en\") => {\n    switch (lang) {\n      case \"en\":\n        return \"English\";\n        break;\n\n      case \"de\":\n        return \"Deutsch\";\n        break;\n\n      case \"nl\":\n        return \"Nederlands\";\n        break;\n\n      case \"hi\":\n        return \"हिन्दी, हिंदी\";\n        break;\n\n      case \"fr\":\n        return \"Français\";\n        break;\n\n      case \"da\":\n        return \"Dansk\";\n        break;\n\n      case \"es\":\n        return \"Español\";\n        break;\n\n      default:\n        return \"Language name not found\";\n        break;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/jan/Documents/filen/app/src/utils/language.js"],"names":["en","require","nl","hi","de","fr","da","es","translations","module","exports","get","lang","text","firstUpperCase","replaceFrom","replaceTo","gotText","charAt","toUpperCase","slice","length","i","split","join","isAvailable","list","name"],"mappings":"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","sourcesContent":["const en = require(\"../lang/en\")\r\nconst nl = require(\"../lang/nl\")\r\nconst hi = require(\"../lang/hi\")\r\nconst de = require(\"../lang/de\")\r\nconst fr = require(\"../lang/fr\")\r\nconst da = require(\"../lang/da\")\r\nconst es = require(\"../lang/es\")\r\n\r\nlet translations = {}\r\n\r\ntranslations['en'] = en.translations['en']\r\ntranslations['nl'] = nl.translations['nl']\r\ntranslations['hi'] = hi.translations['hi']\r\ntranslations['de'] = de.translations['de']\r\ntranslations['fr'] = fr.translations['fr']\r\ntranslations['da'] = da.translations['da']\r\ntranslations['es'] = es.translations['es']\r\n\r\nmodule.exports = {\r\n    get: (lang = \"en\", text, firstUpperCase = true, replaceFrom = [], replaceTo = []) => {\r\n        let gotText = translations[lang][text]\r\n\r\n        if(!gotText){\r\n            if(translations['en'][text]){\r\n                gotText = translations['en'][text]\r\n            }\r\n            else{\r\n                return \"NO_TRANSLATION_FOUND\"\r\n            }\r\n        }\r\n\r\n        if(firstUpperCase){\r\n            gotText = gotText.charAt(0).toUpperCase() + gotText.slice(1)\r\n        }\r\n\r\n        if(replaceFrom.length > 0 && replaceTo.length > 0){\r\n            for(let i = 0; i < replaceFrom.length; i++){\r\n                gotText = gotText.split(replaceFrom[i]).join(replaceTo[i])\r\n            }\r\n        }\r\n\r\n        return gotText\r\n    },\r\n    isAvailable: (lang) => {\r\n        if(typeof translations[lang] !== \"undefined\"){\r\n            return true\r\n        }\r\n\r\n        return false\r\n    },\r\n    list: () => {\r\n        return translations\r\n    },\r\n    name: (lang = \"en\") => {\r\n        switch(lang){\r\n            case \"en\":\r\n                return \"English\"\r\n            break\r\n            case \"de\":\r\n                return \"Deutsch\"\r\n            break\r\n            case \"nl\":\r\n                return \"Nederlands\"\r\n            break\r\n            case \"hi\":\r\n                return \"हिन्दी, हिंदी\"\r\n            break\r\n            case \"fr\":\r\n                return \"Français\"\r\n            break\r\n            case \"da\":\r\n                return \"Dansk\"\r\n            break\r\n            case \"es\":\r\n                return \"Español\"\r\n            break\r\n            default:\r\n                return \"Language name not found\"\r\n            break\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}